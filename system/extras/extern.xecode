<?php
/*
##     ## ######## ##    ##  #######  ##    ##  #######   ######
 ##   ##  ##       ###   ## ##     ## ###   ## ##     ## ##    ##
  ## ##   ##       ####  ## ##     ## ####  ## ##     ## ##
   ###    ######   ## ## ## ##     ## ## ## ## ##     ##  ######
  ## ##   ##       ##  #### ##     ## ##  #### ##     ##       ##
 ##   ##  ##       ##   ### ##     ## ##   ### ##     ## ##    ##
##     ## ######## ##    ##  #######  ##    ##  #######   ######


XenonOS is a fork of the oneye project.
XenonOS Copyright © 2019 Trinity (touhouboi@protonmail.com)

Original Copyright
------------------------------------------
https://oneye-project.org
Copyright © 2005 - 2010 eyeos Team (team@eyeos.org)
             since 2010 Lars Knickrehm (mail@lars-sh.de)

*/

function XenonOS_init()
{
	if (!defined('XENONOS_INDEX'))
	{
		define('XENONOS_INDEX', 1);

		define('XENONOS_ROOT', dirname(__FILE__) . '/..');
		
		$error_reporting = error_reporting(E_ALL ^ E_NOTICE);
		
		require_once(XENONOS_ROOT.'/../settings.php');
		
		error_reporting($error_reporting);

		include_once(XENONOS_ROOT.'/'.SYSTEM_DIR.'/'.LIB_DIR.'/eyeString/main'.XE_CODE_EXTENSION);
		
		call_user_func('lib_eyeString_start');
		
		define('LIB_EYESTRING_LOADED', 1);

		include_once(XENONOS_ROOT.'/'.SYSTEM_DIR.'/'.KERNEL_DIR.'/kernel'.XE_CODE_EXTENSION);

		define('INDEX_TYPE', 'extern');
		
		define('INDEX_BASE', XENONOS_ROOT . '../');
		
		define('ROOTUSER', REAL_ROOTUSER);

		XenonOS_init();

		errorCodes('loadCodes');
		
		eyePear('loadPear');

		if (EYEOS_SECURITY == 1)
		{
			sec('start');
		}
		
		global $LOG_RUNNING;
		
		$LOG_RUNNING = 0;
	}
	else
	{
		global $currentUser;
		
		if ($currentUser)
		{
			XenonOS_stop();
		}
		
		global $XENONOS_EXTERN;
		
		$XENONOS_EXTERN['error_reporting'] = error_reporting();
		$XENONOS_EXTERN['default_charset'] = ini_get('default_charset');
		$XENONOS_EXTERN['time_limit'] = ini_get('max_execution_time');

		if (XENONOS_DEBUG_MODE == 0)
		{
			error_reporting(0);
		}
		else if (XENONOS_DEBUG_MODE == 2)
		{
			error_reporting(E_ALL);
		}
		else if
		(XENONOS_DEBUG_MODE == 3)
		{
			error_reporting(E_ALL ^ E_NOTICE);
		}
		else
		{
			error_reporting(E_ERROR);
		}
		
		if (ALLOW_BIG_STREAMS == 1)
		{
			@set_time_limit(0);
		}
		
		ini_set('default_charset', DEFAULT_CHARSET);

		$currentUser = REAL_ROOTUSER;
	}
}

function XenonOS_stop()
{
	global $currentUser;
	
	if (defined('XENONOS_INDEX') || $currentUser)
	{
		global $XENONOS_EXTERN;

		error_reporting($XENONOS_EXTERN['error_reporting']);

		if (ALLOW_BIG_STREAMS == 1)
		{
			@set_time_limit($XENONOS_EXTERN['time_limit']);
		}
		
		ini_set('default_charset', $XENONOS_EXTERN['default_charset']);

		global $currentUser;
		
		$currentUser = null;
	}
	else
	{
		return(false);
	}
}
?>
