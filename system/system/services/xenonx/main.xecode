<?php
/*
##     ## ######## ##    ##  #######  ##    ##  #######   ######
 ##   ##  ##       ###   ## ##     ## ###   ## ##     ## ##    ##
  ## ##   ##       ####  ## ##     ## ####  ## ##     ## ##
   ###    ######   ## ## ## ##     ## ## ## ## ##     ##  ######
  ## ##   ##       ##  #### ##     ## ##  #### ##     ##       ##
 ##   ##  ##       ##   ### ##     ## ##   ### ##     ## ##    ##
##     ## ######## ##    ##  #######  ##    ##  #######   ######


XenonOS is a fork of the oneye project.
XenonOS Copyright © 2019 Trinity (touhouboi@protonmail.com)

Original Copyright
------------------------------------------
https://oneye-project.org
Copyright © 2005 - 2010 eyeos Team (team@eyeos.org)
             since 2010 Lars Knickrehm (mail@lars-sh.de)

*/

/*
	XenonOS Xe system, for visual tasks
*/

define('GLOBAL_FATHER','eyeApps');

function service_xenonx_init()
{
	if (isset($_REQUEST['type']) === false || $_REQUEST['type'] !== 'dynamic')
	{
		header("Content-type:text/xml");
	}
}

function service_xenonx_setDiv($params)
{
	global $procInfo;

	if($params == null || count($params) < 2)
	{
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	$myDiv = $params['name'];
	$myContent = $params['content'];

	$atribs = array (
		'task' => array ('setDiv'),
		'name' => array ($procInfo['pid'].'_'.$myDiv),
		'content' => array ($myContent)
	);

	$task = array (
		'action' => array (
			$atribs
		)
	);

	$myAction = xenonXML('array2xml', array($task));

	mmap('addToBuffer',array($myAction));

	return(true);
}

function service_xenonx_loadScript($params = null)
{
	if (!isset($params['url']))
	{
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	$myScript = $params['url'];

	$atribs = array (
		'task' => array ('loadScript'),
		'url' => array ($myScript),
	);

	$task = array (
		'action' => array (
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));

	mmap('addToBuffer', array($myAction));

	return(true);
}

function service_xenonx_loadCSS($params)
{
	if (!$params['url'] || !$params['id'])
	{
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));

		return false;
	}

	$myScript = $params['url'];
	$myID = $params['id'];

	$atribs = array (
		'task' => array ('loadCSS'),
		'url' => array ($myScript),
		'id' => array ($myID)
	);

	$task = array (
		'action' => array (
			$atribs
		)
	);

	$myAction = xenonXML('array2xml', array($task));

	mmap('addToBuffer',array($myAction));

	return(true);
}

function service_xenonx_removeCSS($params)
{
	if (!$params['id'])
	{
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));

		return false;
	}

	$myID = $params['id'];

	$atribs = array (
		'task' => array ('removeCSS'),
		'id' => array ($myID),
	);

	$task = array (
		'action' => array (
			$atribs
		)
	);

	$myAction = xenonXML('array2xml', array($task));

	mmap('addToBuffer', array($myAction));

	return(true);
}

function service_xenonx_setWallpaper($params)
{
	if (!$params['path'])
	{
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));

		return(false);
	}

	$wallp = $params['path'];
	$repeat = $params['repeat'];
	$center = $params['center'];
	$color = $params['color'];

	if (!isset($repeat))
	{
		$repeat = 0;
	}

	if (!isset($center))
	{
		$center = 1;
	}

	$atribs = array (
		'task' => array ('setWallpaper'),
		'url' => array ($wallp),
		'repeat' => array ($repeat),
		'center' => array ($center),
		'color' => array ($color)
	);

	$task = array (
		'action' => array (
			$atribs
		)
	);

	$myAction = xenonXML('array2xml', array($task));

	mmap('addToBuffer', array($myAction));

	return(true);
}

function service_xenonx_getThemeImage($params)
{
	$path = $params[0];
	$extend = null;

	if (isset($params[1]) === true)
	{
		$extend = $params[1];
	}

	if (!$path)
	{
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));

		return(false);
	}

	$themes_path = XENONOS_ROOT . '/' . EXTERN_DIR . '/' . THEMES_DIR;

	if ($extend === 1 || $extend == 2)
	{
		$path = $themes_path . '/default/' . $path;
	}

	$path = str_replace('\\','/',$path);
	$path = str_replace('//','/',$path);
	$path = str_replace('//','/',$path);

	if (stripos($path, 'extern=') !== false)
	{
		$path = xenonx('getRealFromExtern',array($path));
	}

	$url = $path;

	if (strpos($path, $themes_path . '/default/') !== false)
	{
		$path = $themes_path . '/' . $_SESSION['usertheme'] . '/' . substr($url, strlen($themes_path . '/default/')); // utf8
		$path = xenonx_getExistingPath($path);

		if (!$path)
		{
			$alias = array();

			include XENONOS_ROOT . '/' . SYSTEM_DIR . '/' . SERVICE_DIR . '/xenonx/image_alias' . XE_CODE_EXTENSION;

			$temp = substr($url, strlen($themes_path . '/default/'));

			if (isset($alias[0][$temp]) === true)
			{
				$path = $themes_path . '/' . $_SESSION['usertheme'] . '/' . $alias[0][$temp];
				$path = xenonx_getExistingPath($path);
			}
			else
			{
				$path = false;
			}

			if (!$path)
			{
				$path = $themes_path . '/default/' . substr($url, strlen($themes_path . '/default/'));
				$path = xenonx_getExistingPath($path);

				if (!$path)
				{
					if ($alias[0][$temp])
					{
						$path = $themes_path . '/default/' . $alias[0][$temp];
						$path = xenonx_getExistingPath($path,$extend);
					}
					else
					{
						$path = false;
					}

					if (!$path)
					{
						return xenonx_returnWrongPath($url,$extend);
					}
				}
			}
		}
	}
	else
	{
		$path = xenonx_getExistingPath($path);

		if (!$path)
		{
			$alias = array();

			include XENONOS_ROOT . '/' . SYSTEM_DIR . '/' . SERVICE_DIR . '/xenonx/image_alias' . XE_CODE_EXTENSION;

			$path = substr($url, strlen(XENONOS_ROOT . '/' . EXTERN_DIR . '/'));

			if ($alias[1][$path])
			{
				$path = xenonx('getThemeImage',array($themes_path . '/default/' . $alias[1][$path],3));
			}
			else
			{
				return xenonx_returnWrongPath($path, $extend);
			}
		}
	}

	if ($extend == 2 || $extend == 3)
	{
		return($path);
	}
	else
	{
		return('index.php?extern=' . substr($path, strlen(XENONOS_ROOT . '/' . EXTERN_DIR . '/')));
	}
}

function xenonx_getExistingPath($path)
{
	//if (IE > 0 && IE < 7 && substr($path, -4) === '.png' && vfs('real_fileExists', array(substr($path, 0, -3) . 'gif')) === true)
	if (substr($path, -4) === '.png' && vfs('real_fileExists', array(substr($path, 0, -3) . 'gif')) === true)
	{
		return(substr($path, 0, -3) . 'gif');
	}
	elseif (vfs('real_fileExists', array($path)))
	{
		return($path);
	}
	else
	{
		return(false);
	}
}

function xenonx_returnWrongPath($path,$extend)
{
	errorCodes('setErrorCode', array(VFS_FILE_NOT_FOUND));

	if ($extend == 3)
	{
		return(XENONOS_ROOT . '/' . EXTERN_DIR . '/' . $path);
	}
	elseif ($extend == 2)
	{
		return(XENONOS_ROOT . '/' . EXTERN_DIR . '/' . THEMES_DIR . '/default/' . $path);
	}
	elseif ($extend === 1)
	{
		return('index.php?extern=' . $path);
	}
	else
	{
		return($path);
	}
}

function service_xenonx_getRealFromExtern($params)
{
	$path = $params[0];

	if (!$path)
	{
		errorCodes('setErrorCode', array(INCORRECT_PARAMS));

		return false;
	}

	$return = XENONOS_ROOT . '/' . EXTERN_DIR . '/';

	if ( stripos($path, 'theme=') !== false)
	{
		$return .= THEMES_DIR . '/default/';
	}

	$path = substr($path, stripos($path, 'extern=') + 7);

	if (strpos($path, '&') !== false)
	{
		$path = substr($path, 0, strpos($path, '&'));
	}

	return($return . $path);
}

function service_xenonx_createDiv($params)
{
	if(!isset($params['name']) || !isset($params['father']))
	{
		errorCodes('setErrorCode', array(INCORRECT_PARAMS));

		return false;
	}

	$name = $params['name'];
	$father = $params['father'];

	if(!isset($params['class']))
	{
		$class = ' ';
	}
	else
	{
		$class = $params['class'];
	}

	global $procInfo;

	$isLayer = xenonx('isLayer', array('name' => $father));

	if(!$isLayer && !isset($params['removepid']))
	{
		$father = $procInfo['pid'].'_'.$father;
	}

	if(!isset($params['nopid']))
	{
		$name = $procInfo['pid'].'_'.$name;
	}

	$atribs = array (
		'task' => array ('createDiv'),
		'name' => array ($name),
		'class' => array ($class),
		'father' => array ($father)
	);

	$task = array (
		'action' => array (
			$atribs
		)
	);

	$myAction = xenonXML('array2xml', array($task));

	mmap('addToBuffer', array($myAction));

	return(true);
}

function service_xenonx_createWidget($params)
{
	if(!is_array($params)) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	if(!$params['name'] || !$params['father']) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	global $checknum;
	global $procInfo;


	$name = $params['name'];
	$father = $params['father'];
	$x = $params['x'];
	$y = $params['y'];
	$widgetname = $params['widgetname'];
	$widgetparams = $params['params'];
	$horiz = $params['horiz'];
	$vert = $params['vert'];
	$isLayer = xenonx('isLayer',array('name'=>$father));
	if(!$isLayer && (isset($params['removepid']) === false || $params['removepid'] != 1)) {
		$father = $procInfo['pid'].'_'.$father;
	}
	if(!isset($params['center'])) {
		$cent = 0;
	} else {
		$cent = $params['center'];
	}
	$atribs = array(
		'task' => array('createWidget'),
		'position' => array(
			array(
				'x' => array($x),
				'y' => array($y),
				'horiz' => array($horiz),
				'vert' => array($vert)
			)
		),
		'checknum' => array($checknum),
		'name' => array($procInfo['pid'].'_'.$name),
		'father' => array($father),
		'widgetname' => array($widgetname),
		'params' => array($widgetparams),
		'cent' => array($cent)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Eliminates a widget from the user's session.
*
* @param $params array(name)
* @param $name Name of the widget to delete.
* @return If no name is specified, returns false and sets the error
*	code accordingly. Otherwise, it does not return any value.
* @exception INCORRECT_PARAMS No element name is specified.
* @date 2008/03/11
*/
function service_xenonx_removeWidget($params) {
	if(!$params['name']) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	global $procInfo;
	$name = $procInfo['pid'].'_'.$params['name'];
	$atribs = array(
		'task' => array('removeWidget'),
		'name' => array($name),
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Displays a dialog to the user with the specified message.
*
* @param $params array(content,[tokens],[type],[title],[win_name],[win_style],[win_removepid],[btn1_name],[btn1_capt],[btn2_name],[btn2_capt],[btn3_name],[btn3_capt],[hidden_name],[hidden_text],[hidden1_name],[hidden1_text],[hidden2_name],[hidden2_text],[hidden3_name],[hidden3_text],[father],[img],[textbox_name],[textbox_text],[textbox_password],[textbox_event],[select_name],[select_event])
* @param $content String containing the message to be displayed.
* @param $tokens Indexed array containing the value of the tokens appearing
*	on 'message'.  Each token in the 'content' parameter is
*	represented by the '%s' string.
* @param $type The presentation type of the message. A value of 1 uses a
*	custom oneye style to display the message, a value of 2 uses
*	a JavaScript alert window, while a value of 3 uses a Window
*	to display a dialog box. The dialog options can be
*	configured with the following parameters. Its default value
*	is 1.
* @param $title Sets the title of the displayed window message.
* @param $win_name Name of the Window of the dialog box.
* @param $win_style Specifies the properties of the Window of the dialog. To set
*	multiple properties you must specify the desired properties
*	separated by '+' symbols.
			TITLE: the Window has a
*	title.
			LISTED: the Window is listed in the windows
*	list.
			MIN: the Window can be minimized.
			MAX: the
*	Window can be maximized.
			CLOSE: the Window can be
*	closed.
			RESIZE: the Window can be resized.
			NODRAG: the
*	Window can't be moved.
* @param $win_removepid Specifies whether the application must be ended when the
*	dialog is closed (1) or not (0). Default value is 1.
* @param $buttons Array of one array per button. These arrays include: array(name,caption,signal)
* @param $hiddens Array of one array per hidden. These arrays include: array(name,text)
* @param $father Parent element of the dialog.
* @param $img Type of the image displayed in the dialog along with the
*	text. The use of the predefined values 'i', 'x', '!' and '?'
*	will show an icon denoting an information symbol, a cross, a
*	warning or an interrogant, respectively.
* @param $textbox_name If specified, creates a Textbox to input information in the
*	dialog. The Textbox will use this parameter as its name.
* @param $textbox_text Default text of the Textbox.
* @param $textbox_password Specifies whether the text in the Textbox is shown as plain
*	text (0) or masked with asterisks as a password field (1).
*	Default value is 0.
* @param $textbox_event Name of the signal sent to the system in case the user
*	presses the enter key in the Textbox.
* @param $select_name If specified, creates a Select widget to select information in the
*	dialog. The Select widget will use this parameter as its name.
* @param $select_event Name of the signal sent to the system in case the user
*	presses the enter key in the Select widget.
* @return If the function succeeds, it returns the created Textbox, Select widget or true.
*	Otherwise, if some parameter is missing, returns false and
*	sets the error code to the INVALID_PARAMS code.
* @exception INCORRECT_PARAMS Some parameter is not specified.
* @date 2009/05/09
*/
function service_xenonx_messageBox($params = '') {
	global $checknum;
	global $myPid;
	if (!isset($params['content'])) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	if (isset($params['type']) === true && $params['type'] == 3) {
		if (!isset($params['title']) || !isset($params['win_name'])) {
			errorCodes('setErrorCode',array(INCORRECT_PARAMS));
			return false;
		}

		if (!isset($params['sound'])) {
			if ($params['img'] == 'i') {
				$params['sound'] = 'info';
			} elseif($params['img'] == 'x') {
				$params['sound'] = 'error';
			} elseif($params['img'] == '!') {
				$params['sound'] = 'warning';
			} elseif($params['img'] == '?') {
				$params['sound'] = 'question';
			} else {
				$params['sound'] = 'message';
			}
		}
		if (!empty($params['sound'])) {
			xenonx('systemSound', array($params['sound']));
		}

		if (!isset($params['father'])) {
			$params['father'] = 'eyeApps';
		}
		if (!isset($params['win_style'])) {
			$params['win_style'] = TITLE;
		}
		if (!isset($params['win_removepid'])) {
			$params['win_removepid'] = 1;
		}
		$width = 390;
		if (!isset($params['img'])) {
			$width -= 60;
		}
		$myWidget = true;
		$myWindow = new Window(array(
			'cent' => 1,
			'father' => $params['father'],
			'height' => 150,
			'name' => $params['win_name'],
			'removepid' => $params['win_removepid'],
			'savePosition' => $params['savePosition'],
			'style' => $params['win_style'],
			'title' => $params['title'],
			'width' => $width
		));
		$myWindow->show();

		if (isset($params['img'])) {
			if ($params['img'] == 'i') {
				$params['img'] = 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=icons/48x48/i.png';
			} elseif($params['img'] == 'x') {
				$params['img'] = 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=icons/48x48/x.png';
			} elseif($params['img'] == '!') {
				$params['img'] = 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=icons/48x48/e.png';
			} elseif($params['img'] == '?') {
				$params['img'] = 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=icons/48x48/q.png';
			}
			$myImagebox = new ImageBox(array(
				'father' => $params['win_name'] . '_Content',
				'name' => $params['win_name'] . '_Imagebox',
				'url' => $params['img'],
				'x' => 20,
				'y' => 20,
			));
			$myImagebox->show();
		}

		$myLabel = new Label(array(
			'father' => $params['win_name'] . '_Content',
			'horiz' => 1,
			'name' => $params['win_name'] . '_Label',
			'text' => $params['content'],
			'tokens' => $params['tokens'],
			'x' => 20,
			'y' => 20
		));
		$myLabel->show();
		$myLabel->setCss(array(
			'text-align' => 'justify',
			'width' => '275px'
		));

		// Support for deprecated parameters
		if (!is_array($params['hiddens'])) {
			if (isset($params['hidden_name']) && isset($params['hidden_text'])) {
				$params['hiddens'][0] = array($params['hidden_name'],$params['hidden_text']);
			}
			if (isset($params['hidden1_name']) && isset($params['hidden1_text'])) {
				$params['hiddens'][1] = array($params['hidden1_name'],$params['hidden1_text']);
			}
			if (isset($params['hidden2_name']) && isset($params['hidden2_text'])) {
				$params['hiddens'][2] = array($params['hidden2_name'],$params['hidden2_text']);
			}
			if (isset($params['hidden3_name']) && isset($params['hidden3_text'])) {
				$params['hiddens'][3] = array($params['hidden3_name'],$params['hidden3_text']);
			}
		}
		$myHiddens = array();
		if (is_array($params['hiddens'])) {
			foreach ($params['hiddens'] as $hidden) {
				if (isset($hidden[0]) && isset($hidden[1])) {
					$myHidden = new Hidden(array(
						'father' => $params['win_name'] . '_Content',
						'name' => $hidden[0],
						'text' => $hidden[1],
					));
					$myHidden->show();
					$myHiddens[] = $myHidden;
				}
			}
		}

		if ($params['textbox_name']) {
			$myWidget = new Textbox(array(
				'father' => $params['win_name'] . '_Content',
				'horiz' => 1,
				'name' => $params['textbox_name'],
				'password' => $params['textbox_password'],
				'text' => $params['textbox_text'],
				'width' => 275,
				'x' => 20,
				'y' => 55
			));
			foreach ($myHiddens as $myHidden) {
				$myWidget->addFriend($myHidden);
			}
			$myWidget->show();
			$myWidget->focus();
			if (isset($params['textbox_event'])) {
				$myWidget->addEnterEventMsg($params['textbox_event']);
			}
		} else if ($params['select_name']) {
			$myWidget = new Select(array(
				'father' => $params['win_name'] . '_Content',
				'horiz' => 1,
				'name' => $params['select_name'],
				'width' => 275,
				'x' => 20,
				'y' => 55
			));
			foreach ($myHiddens as $myHidden) {
				$myWidget->addFriend($myHidden);
			}
			$myWidget->show();
			$myWidget->focus();
			if (isset($params['select_event'])) {
				$myWidget->addEnterEventMsg($params['select_event']);
			}
		}

		// Support for deprecated parameters
		if (!is_array($params['buttons'])) {
			if (isset($params['btn1_name']) && isset($params['btn1_capt'])) {
				$params['buttons'][0] = array($params['btn1_name'],$params['btn1_capt']);
			}
			if (isset($params['btn2_name']) && isset($params['btn2_capt'])) {
				$params['buttons'][1] = array($params['btn2_name'],$params['btn2_capt']);
			}
			if (isset($params['btn3_name']) && isset($params['btn3_capt'])) {
				$params['buttons'][2] = array($params['btn3_name'],$params['btn3_capt']);
			}
		}
		if (is_array($params['buttons'])) {
			$buttons = '';
			$params['buttons'] = array_reverse($params['buttons']);
			foreach ($params['buttons'] as $button) {
				if (isset($button[0]) && isset($button[1])) {
					if (!isset($button[2])) {
						$button[2] = $button[0];
					}
					$myButton = new Button(array(
						'caption' => $button[1],
						'father' => $params['win_name'] . '_Content',
						'horiz' => 1,
						'name' => $button[0],
						'signal' => $button[2],
						'y' => 90
					));
					$myButton->addFriend($myWidget);
					foreach ($myHiddens as $myHidden) {
						$myButton->addFriend($myHidden);
					}
					$myButton->show();
					$buttons .= ',"' . $button[0] . '"';
				}
			}
			xenonx('rawjs',array('js' => 'var buttons = new Array(' . /* utf8 */ substr($buttons, 1) . ');
			var right = 20;
			for (var b = 0; b < buttons.length; b++) {
				var e = xGetElementById("' . $myPid . '_" + buttons[b] + "_Container");
				e.style.right = right + "px";
				right += 20 + xWidth(e);
			}'));
		}
		return $myWidget;
	} else {
		if (isset($params['type']) === false || $params['type'] != 2) {
			if (!isset($params['sound'])) {
				$params['sound'] = 'message';
			}
			if (!empty($params['sound'])) {
				xenonx('systemSound', array($params['sound']));
			}
			$params['type'] = 1;
		}
		$action['action'][0]['task'][0] = 'messageBox';
		$action['action'][0]['content'][0] = utf8_htmlspecialchars(i18n('translate', array($params['content'], $params['tokens'])), ENT_QUOTES);
		$action['action'][0]['type'][0] = $params['type'];
		mmap('addToBuffer',array(xenonXML('array2xml',array($action))));
	}
	return true;
}

/**
* Changes the value of a widget.
*
* @param $params array(name,value)
* @param $name Name of the element.
* @param $value New value of the element.
* @return If no name is specified, returns false and sets the error
*	code accordingly. Otherwise, it does not return any value.
* @exception INCORRECT_PARAMS No element name is specified.
* @date 2008/03/11
*/
function service_xenonx_setValue($params) {
	if(!isset($params['value'])) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	$content = $params['value'];

	if($params['name'])	{
		$widget = $params['name'];
	} else {
		$type = 1;
	}

	$atribs = array(
		'task' => array('setValue'),
		'content' => array($content),
		'widget' => array($widget)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Changes the value of a widget. The given value is supposed to be
* encoded in base 64.
*
* @param $params array(name,value)
* @param $name Name of the widget.
* @param $value New value to set, in base 64.
* @return If no name is specified, returns false and sets the error
*	code accordingly. Otherwise, it does not return any value.
* @exception INCORRECT_PARAMS No name or value are specified.
* @date 2008/03/11
*/
function service_xenonx_setValueB64($params) {
	if(isset($params['value'])) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$content = $params['value'];

	if($params['name'])	{
		$widget = $params['name'];
	} else {
		$type = 1;
	}

	$atribs = array(
		'task' => array('setValueB64'),
		'content' => array($content),
		'widget' => array($widget)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Concatenates to the value property of a widget an specified text. The
* specified value is encoded in base 64 until it is set.
*
* @param $params array(name,value)
* @param $name Name of the widget.
* @param $value Text to append.
* @return If no widget name is specified, returns false and sets the
*	error code accordingly. Otherwise, it does not return any
*	value.
* @exception INCORRECT_PARAMS No widget name is specified.
* @date 2008/03/11
*/
function service_xenonx_concatValueB64($params) {
	if(!isset($params['value'])) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	$content = $params['value'];
	if($params['name'])	{
		$widget = $params['name'];
	} else {
		$type = 1;
	}

	$atribs = array(
		'task' => array('concatValueB64'),
		'content' => array($content),
		'widget' => array($widget)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Concatenates to the value property of a widget an specified text.
*
* @param $params array(name,value)
* @param $name Name of the widget.
* @param $value Text to append.
* @return If no widget name is specified, returns false and sets the
*	error code accordingly. Otherwise, it does not return any
*	value.
* @exception INCORRECT_PARAMS No widget name is specified.
* @date 2008/03/11
*/
function service_xenonx_concatValue($params) {
	if(!isset($params['value'])) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	$content = $params['value'];

	if($params['name'])	{
		$widget = $params['name'];
	} else {
		$type = 1;
	}

	$atribs = array(
		'task' => array('concatValue'),
		'content' => array($content),
		'widget' => array($widget)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Concatenates to the value property of a div element an specified content.
*
* @param $params array(name,value)
* @param $name Name of the widget.
* @param $value Content to append.
* @return If no widget name is specified, returns false and sets the
*	error code accordingly. Otherwise, it does not return any
*	value.
* @exception INCORRECT_PARAMS No widget name is specified.
* @date 2008/03/11
*/
function service_xenonx_concatDiv($params) {
	if(!isset($params['value'])) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	$content = $params['value'];

	if($params['name'])	{
		$widget = $params['name'];
	} else {
		$type = 1;
	}

	$atribs = array(
		'task' => array('concatDiv'),
		'content' => array($content),
		'widget' => array($widget)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}
/**
* Executes a specified JS code. We recommend to use the runjs()
* function, which has a better content handling.
*
* @param $params array(js)
* @param $js JavaScript code to be evaluated.
* @return If no code is specified, returns false and sets the error
*	code accordingly. Otherwise, it does not return any value.
* @exception INCORRECT_PARAMS No code is specified.
* @date 2008/03/11
*/
function service_xenonx_rawjs($params) { //useful for widgets
	if(!$params['js']) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	$atribs = array(
		'task' => array('rawjs'),
		'js' => array($params['js'])
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Executes a specified JS code.
*
* @param $params array(js,[Array])
* @param $js JavaScript code to be evaluated.
* @param $Array
* @return If no code is specified, returns false and sets the error
*	code accordingly. Otherwise, it does not return any value.
* @exception INCORRECT_PARAMS No code is specified.
* @date 2008/03/11
*/
function service_xenonx_runjs($params) { //util for widgets
	if(!isset($params['js'])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	if(isset($params['tokens'])){
		$tokens = $params['tokens'];
	}else{
		$tokens = null;
	}
	$js = $params['js'];

	if(isset($tokens) && is_array($tokens)) {
		$pieces = /* utf8 */ explode("%s",$js);
		$js = '';
		$i = 0;
		foreach($pieces as $value) {
			$js .= $pieces[$i];
			if(isset($tokens[$i])) {
				$tokens[$i] = str_replace('\\','\\\\',$tokens[$i]);
				$tokens[$i] = str_replace("'","\'",$tokens[$i]);
				$tokens[$i] = str_replace('"','\"',$tokens[$i]);
				$tokens[$i] = str_replace("\n", '\\n', $tokens[$i]);
				$tokens[$i] = str_replace("\r", '\\r', $tokens[$i]);
				$js .= '"'.$tokens[$i].'"';
			}
			$i++;
		}
	}

	$atribs = array(
		'task' => array('rawjs'),
		'js' => array($js)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Changes a widget's position.
*
* @param $params array(name,x,y)
* @param $name Name of the widget.
* @param $x New horizontal position of the widget, expressed in pixels.
* @param $y New vertical position of the widget, expressed in pixels.
* @return If the function succeeds, returns true. Otherwise, returns
*	false and sets the error code depending on the error
*	occurred.
* @exception INCORRECT_PARAMS Some parameter is not specified.
* @date 2008/03/11
*/
function service_xenonx_moveWidget($params) {
	//TODO: check if it already work with old code
	if(!$params['name'] || !$params['x'] || !$params['y']) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	$name = $params['name'];
	$x = $params['x'];
	$y = $params['y'];

	$atribs = array(
		'task' => array('moveWidget'),
		'name' => array($name),
		'x' => array($x),
		'y' => array($y)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Changes the size of an existing widget to the specified width and
* height.
*
* @param $params array(name,width,height)
* @param $name Name of the widget.
* @param $width New width of the widget, expressed in pixels.
* @param $height New height of the widget, expressed in pixels.
* @return If some parameter is not specified, returns false and sets
*	the error code accordingly. Otherwise, it does not return
*	any value.
* @exception INCORRECT_PARAMS Some parameter is not specified.
* @date 2008/03/11
*/
function service_xenonx_resizeWidget($params) {
	if(!$params['name'] || !$params['width'] || !$params['height']) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	$name = $params['name'];
	$x = $params['width'];
	$y = $params['height'];

	$atribs = array(
		'task' => array('resizeWidget'),
		'name' => array($name),
		'width' => array($x),
		'height' => array($y)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Makes a widget draggable by the user.
*
* @param $params array(name,father)
* @param $name Name of the widget.
* @param $father Name of the's father (containing) element.
* @param $noIndex if is set true, the drag action don't increasses the zIndex value
* @return If one or both parameters are not specified, returns false
*	and sets the error code accordingly. Otherwise, it does not
*	return any value.
* @exception INCORRECT_PARAMS Some parameter is not specified.
* @date 2008/03/11
*/
function service_xenonx_makeDrag($params) {
	if(!$params['name'] || !$params['father']) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$params['noIndex'] ? $noIndex = true : $noIndex = false;
	$atribs = array(
		'task' => array('makeDrag'),
		'name' => array($params['name']),
		'father' => array($params['father']),
		'noIndex'=>array($noIndex)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Sets a CSS property of an element.
*
* @param $params array(name,property,value)
* @param $name Name of the element.
* @param $property Name of the CSS property to modify.
* @param $value Value of the property.
* @return If no name is specified, returns false and sets the error
*	code accordingly. Otherwise, it does not return any value.
* @exception INCORRECT_PARAMS No element name is specified.
* @date 2008/03/11
*/
function service_xenonx_updateCss($params)
{
	if(!$params['name'] || !$params['property'] || !$params['value']) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	$name = $params['name'];
	$value = $params['value'];

	$prop = camelCase($params['property']);

	$atribs = array(
		'task' => array('updateCss'),
		'name' => array($name),
		'property' => array($prop),
		'value' => array($value)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Specifies which JavaScript code must be executed every time a widget
* triggers a JS event.
*
* @param $params array(name,action,event,[args])
* @param $name Name of the widget where to apply the event.
* @param $action JS code to be executed when the event is triggered.
* @param $event Name of the JS event.
* @param $args Additional arguments passed to the JS code.
* @return This function does not return any value.
* @date 2008/03/11
*/
function service_xenonx_addEvent($params)
{
	if(!$params['name'] || !$params['action'] || !$params['event']) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}
	$name = $params['name'];
	$func = $params['action'];
	$event = $params['event'];

	if(!$params['args']) {
		$args = 0;
	}else{
		$args = $params['args'];
	}

	$atribs = array(
		'task' => array('addEvent'),
		'name' => array($name),
		'event' => array($event),
		'func' => array($func),
		'args' => array($args)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Sends a signal to the current application.
*
* @param $params array(message,[params])
* @param $message Name of the signal to send.
* @param $params Additional parameters passed to the event.
* @return If no message is specified, returns false and sets the error
*	code accordingly. Otherwise, it does not return any value.
* @exception INCORRECT_PARAMS No message is specified.
* @date 2008/03/11
*/
function service_xenonx_sendMessage($params) {
	if(!$params['msg']) {
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
		return false;
	}

	if(!empty($params['checknum'])){
		$checknum = $params['checknum'];
	}else{
		global $checknum;
	}
	$msg = $params['msg'];

	if(isset($params['params'])) {
		$par = $params['params'];
	} else {
		$par = " ";
	}

	$atribs = array(
		'task' => array('rawSendMessage'),
		'msg' => array($msg),
		'par' => array($par),
		'checknum' => array($checknum)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);

	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Draws a new layer and serializes it into the xenonx layer table.
*
* @param $params array(name,[class])
* @param $name Name used to identify the layer.
* @param $class Name used to identify the layer.
* @return If no layer name is specified, returns false and sets the
*	error code accordingly. Otherwise, it does not return any
*	value.
* @exception INCORRECT_PARAMS No name is specified.
* @date 2008/03/11
*/
function service_xenonx_createLayer($params=''){
 	if(!is_array($params) || !$params['name']){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
 		return false;
 	}
 	if(!$_SESSION[LTABLE]){
 		eyeSessions('makeArrayVar',array(LTABLE));
 	}

 	$name = $params['name'];
 	if($params['class']){
 		$class = $params['class'];
 	}else{
 		$class = 'newLayer';
 	}
 	$father = 'eyeScreen';

 	$atribs = array(
		'task' => array('createLayer'),
		'name' => array($name),
		'class' => array($class),
		'father' => array($father)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);
	eyeSessions('addArrayValueByKey',array(LTABLE,'  ',$name));
	//Adding this layer in layer table with empty content.
	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
 }

/**
* Removes a layer from the user's session.
*
* @param $params array(name)
* @param $name Name of the layer.
* @return If no layer name is specified, returns false and sets the
*	error code accordingly. Otherwise, it does not return any
*	value.
* @exception INCORRECT_PARAMS No name is specified.
* @date 2008/03/11
*/
function service_xenonx_removeLayer($params){
	if(!is_array($params) || !isset($params['name'])){
		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
 		return false;
 	}
 	$name = $params['name'];

 	$atribs = array(
		'task' => array('removeLayer'),
		'name' => array($name),
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);
	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Makes a layer visible and displays it on top of any other layers or
* windows in the screen.
*
* @param $params array(name)
* @param $name Name of the layer.
* @return If no layer name is specified, returns false and sets the
*	error code accordingly. Otherwise, it does not return any
*	value.
* @exception INCORRECT_PARAMS No name is specified.
* @date 2008/03/11
*/
function service_xenonx_showLayer($params){
 	if(!is_array($params) || !isset($params['name'])){
 		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
 		return false;
 	}
 	$name = $params['name'];
 	$atribs = array(
		'task' => array('showLayer'),
		'name' => array($name),
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);
	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
 }

/**
* Makes a layer invisible.
*
* @param $params array(name)
* @param $name Name of the layer.
* @return If no layer name is specified, returns false and sets the
*	error code accordingly. Otherwise, it does not return any
*	value.
* @exception INCORRECT_PARAMS No name is specified.
* @date 2008/03/11
*/
function service_xenonx_hideLayer($params){
 	if(!is_array($params) || !isset($params['name'])){
 		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
 		return false;
 	}
 	$name = $params['name'];
 	$atribs = array(
		'task' => array('hideLayer'),
		'name' => array($name),
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);
	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
 }

/**
* Unhides a layer applying a gradual fade in effect.
*
* @param $params array(name,[time],[startAlpha],[endAlpha])
* @param $name Name of the layer to unhide.
* @param $time Time, expressed in milliseconds, to apply completely the
*	fading effect. Default time value is 1000 ms.
* @param $startAlpha Initial alpha opacity value for the layer. This value must
*	be an integer contained in the 0-100 opacity range. Default
*	startAlpha value is 0.
* @param $endAlpha Final alpha opacity value for the layer. This value must be
*	an integer contained in the 0-100 opacity range. Default
*	endAlpha value is 100.
* @return If no layer name is specified, returns false and sets the
*	error code accordingly.
* @exception INCORRECT_PARAMS No layer name is specified.
* @date 2008/03/11
*/
function service_xenonx_fadeOutLayer($params){
 	if(!is_array($params) || !isset($params['name'])){
 		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
 		return false;
 	}
 	$name = $params['name'];
 	isset($params['time']) ? $time = $params['time'] : $time = 1000;//TODO: unhardcode this
 	isset($params['startAlpha']) ? $startAlpha = $params['startAlpha'] : $startAlpha = 0;//TODO: unhardcode this
 	isset($params['endAlpha']) ? $endAlpha = $params['endAlpha'] : $endAlpha = 100;//TODO: unhardcode this
 	$atribs = array(
		'task' => array('fadeOutLayer'),
		'name' => array($name),
		'time'=> array($time),
		'startAlpha'=>array($startAlpha),
		'endAlpha'=>array($endAlpha)
	);

	$task = array(
		'action' => array(
			$atribs
		)
	);
	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Hides a layer applying a gradual fade to black effect.
*
* @param $params array(name,[time],[startAlpha],[endAlpha])
* @param $name Name of the layer.
* @param $time Time, expressed in milliseconds, to apply completely the
*	fading effect. Default time value is 1000 ms.
* @param $startAlpha Initial alpha opacity value for the layer. This value must
*	be an integer contained in the 0-100 opacity range. Default
*	startAlpha value is 100.
* @param $endAlpha Final alpha opacity value for the layer. This value must be
*	an integer contained in the 0-100 opacity range. Default
*	endAlpha value is 0.
* @return If no layer name is specified, returns false and sets the
*	error code accordingly. Otherwise, it does not return any
*	value.
* @exception INCORRECT_PARAMS No layer name is specified.
* @date 2008/03/11
*/
function service_xenonx_fadeInLayer($params){
 	if(!is_array($params) || !isset($params['name'])){
 		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
 		return false;
 	}
	isset($params['time']) ? $time = $params['time'] : $time = 1000;//TODO: deshardcode this
 	isset($params['startAlpha']) ? $startAlpha = $params['startAlpha'] : $startAlpha = 100;//TODO: deshardcode this
 	isset($params['endAlpha']) ? $endAlpha = $params['endAlpha'] : $endAlpha = 0;//TODO: deshardcode this
 	$name = $params['name'];
	$atribs = array(
		'task' => array('fadeInLayer'),
		'name' => array($name),
		'time'=> array($time),
		'startAlpha'=>array($startAlpha),
		'endAlpha'=>array($endAlpha)
	);
	$task = array(
		'action' => array(
			$atribs
		)
	);
	$myAction = xenonXML('array2xml',array($task));
	mmap('addToBuffer',array($myAction));
	return true;
}

/**
* Checks whether a layer exists or not.
*
* @param $params array(name)
* @param $name Name of the layer.
* @return If no layer name is specified, returns false and sets the
*	error code accordingly. Otherwise, returns a boolean value
*	indicating whether the layer exists or not.
* @exception INCORRECT_PARAMS No name is specified.
* @date 2008/03/11
*/
function service_xenonx_isLayer($params=''){
 	if(!is_array($params) || !isset($params['name'])){
 		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
 		return false;
 	}
 	$name = $params['name'];
 	$LTABLE = eyeSessions('getVar',array(LTABLE));
 	foreach ($LTABLE as $layer=>$content){
 		if($layer == $name){
 			return true;
 		}
 	}
 	return false;
 }

/**
* Runs, when the browser was resized
*
* @param $params array(height,width)
* @exception INCORRECT_PARAMS
* @date 2008/09/28
*/
function service_xenonx_resizedBrowser($params=''){
 	if(!is_array($params) || !isset($params['height']) || !isset($params['width'])){
 		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
 		return false;
 	}
	$_SESSION['SCREEN']['width'] = $params['width'];
	$_SESSION['SCREEN']['height'] = $params['height'];
	$_SESSION['SCREEN']['eyeApps']['height'] = $params['appHeight'];
	$_SESSION['SCREEN']['eyeApps']['width'] = $params['appWidth'];
 	return true;
}

function service_xenonx_print($params='') {
 	if(!is_array($params) || !isset($params[0])) {
 		errorCodes('setErrorCode',array(INCORRECT_PARAMS));
 		return false;
 	}

	if(INDEX_TYPE == 'browser') {
		global $procInfo;
		$text = $params[0];
		$tty = $procInfo['tty'];
		if(empty($tty)) {
			return false;
		}
		$js = 'printToTty("'.$tty.'",%s);';
		xenonx('runjs',array('js'=>$js,'tokens'=>array($text)));
	}
}

function service_xenonx_systemSound($params = '') {
	if ($_SESSION['SCREEN']['oggVorbisSupported']) {
		$extension = 'ogg';
	} else {
		$extension = 'mp3';
	}
	$list = array(
		'error' => 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=sounds/error.' . $extension,
		'info' => 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=sounds/info.' . $extension,
		'login' => 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=sounds/login.' . $extension,
		'logout' => 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=sounds/logout.' . $extension,
		'message' => 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=sounds/message.' . $extension,
		'question' => 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=sounds/question.' . $extension,
		'warning' => 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=sounds/warning.' . $extension
	);
	if (!is_array($params) || !isset($params[0]) || !isset($list[$params[0]])) {
		errorCodes('setErrorCode', array(INCORRECT_PARAMS));
		return false;
	}

	$xml = xenonXML('getXMLconfig', array('eyeDesk', 'conf.xml'));
	if (isset($xml['eyeDesk'][0]['systemSounds'][0]) && !$xml['eyeDesk'][0]['systemSounds'][0]) {
		return false;
	} else {
		return eyeSound('simplePlay', array('systemSound_' . $params[0], $list[$params[0]]));
	}
}

function service_xenonx_jscolor($params = '') {
	if (!is_array($params) || !isset($params[0])) {
		errorCodes('setErrorCode', array(INCORRECT_PARAMS));
		return false;
	}
	$url = xenonx('getThemeImage', array(THEME_CONF_DIR . '/jscolor.xml', 2));

	global $currentUser;
	$oldUser = $currentUser;
	$currentUser = ROOTUSER;
	$xml = xenonXML('getXMLfile', array($url));
	$currentUser = $oldUser;

	$prop = 'adjust: false, caps: false, hash: true, required: false';
	foreach ($xml['jscolor'][0] as $key => $value) {
		$prop .= ', ' . $key . ': ' . str_replace('theme=USERTHEME', 'theme=' . $_SESSION['usertheme'], $value[0]);
	}

	if (isset($params[1]) && is_array($params[0])) {
		foreach ($params[1] as $key => $value) {
			$prop .= ', ' . $key . ': ' . $value;
		}
	}
	xenonx('runjs', array('js' => 'new jscolor.color(document.getElementById(%s), {' . $prop . '});', 'tokens' => array($params[0])));
}

/**
* Camelcases a string.

* @param string $prop string to camelCase
* @return The camelCased string.
* @access private
* @date 2007-02-19
*/
function camelCase($prop) {
	$return = implode('', array_map('ucfirst', explode('-', $prop))); // utf8
	if ( /* utf8 */ substr($prop, 0, 1) === '-') {
		return $return;
	}
	return utf8_lcfirst($return);
}

?>
