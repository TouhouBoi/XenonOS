<?php
/*
##     ## ######## ##    ##  #######  ##    ##  #######   ######
 ##   ##  ##       ###   ## ##     ## ###   ## ##     ## ##    ##
  ## ##   ##       ####  ## ##     ## ####  ## ##     ## ##
   ###    ######   ## ## ## ##     ## ## ## ## ##     ##  ######
  ## ##   ##       ##  #### ##     ## ##  #### ##     ##       ##
 ##   ##  ##       ##   ### ##     ## ##   ### ##     ## ##    ##
##     ## ######## ##    ##  #######  ##    ##  #######   ######


XenonOS is a fork of the oneye project.
XenonOS Copyright © 2019 Trinity (touhouboi@protonmail.com)

Original Copyright
------------------------------------------
https://oneye-project.org
Copyright © 2005 - 2010 eyeos Team (team@eyeos.org)
             since 2010 Lars Knickrehm (mail@lars-sh.de)

*/

/*
	XenonOS XeKernel PHP Version Compatibility Layer
*/

date_default_timezone_set(TIMEZONE);

function get_tmp_dir()
{
	$tmp_dir = XENONOS_ROOT . '/' . EYEOS_TMP_DIR;
	return($tmp_dir);
}

function ini_get_size($sName)
{
    $sSize = ini_get($sName);
    $sUnit = substr($sSize, -1);
    $iSize = (int)substr($sSize, 0, -1);

    switch (strtoupper($sUnit))
    {
        case 'Y' : $iSize *= 1024; // Yotta
        case 'Z' : $iSize *= 1024; // Zetta
        case 'E' : $iSize *= 1024; // Exa
        case 'P' : $iSize *= 1024; // Peta
        case 'T' : $iSize *= 1024; // Tera
        case 'G' : $iSize *= 1024; // Giga
        case 'M' : $iSize *= 1024; // Mega
        case 'K' : $iSize *= 1024; // Kilo
    };

    return($iSize);
}

if (!function_exists('hash_equals'))
{
	function hash_equals($known_string, $user_string)
	{
		return($known_string === $user_string);
	}
}

if (!function_exists('json_encode'))
{
	function json_encode($a = false)
	{
		if (is_null($a))
		{
			return('null');
		}

		if ($a === false)
		{
    		return('false');
		}

		if ($a === true)
		{
    		return('true');
		}

		if (is_scalar($a))
		{
			if (is_float($a))
			{
        return(floatval(str_replace(",", ".", strval($a))));
      }

			if (is_string($a))
			{
        	static $jsonReplaces = array(array("\\", "/", "\n", "\t", "\r", "\b", "\f", '"'), array('\\\\', '\\/', '\\n', '\\t', '\\r', '\\b', '\\f', '\"'));

        	return('"' . str_replace($jsonReplaces[0], $jsonReplaces[1], $a) . '"');
      }
			else
			{
        return($a);
      }
    }

		$isList = true;

		for ($i = 0, reset($a); $i < count($a); $i++, next($a))
		{
			if (key($a) !== $i)
			{
				$isList = false;

				break;
			}
		}

    $result = array();

    if ($isList)
		{
    	foreach ($a as $v) $result[] = json_encode($v);
    	return '[' . join(',', $result) . ']';
    }
		else
		{
    	foreach ($a as $k => $v)
			{
    		$result[] = json_encode($k).':'.json_encode($v);
    	}

    	return('{' . join(',', $result) . '}');
    }
	}
}

if (!function_exists('lcfirst'))
{
	function lcfirst($str)
	{
		return(strtolower(substr($str, 0, 1)) . substr($str, 1));
	}
}
?>
