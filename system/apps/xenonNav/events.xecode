<?php
/*
##     ## ######## ##    ##  #######  ##    ##  #######   ######
 ##   ##  ##       ###   ## ##     ## ###   ## ##     ## ##    ##
  ## ##   ##       ####  ## ##     ## ####  ## ##     ## ##
   ###    ######   ## ## ## ##     ## ## ## ## ##     ##  ######
  ## ##   ##       ##  #### ##     ## ##  #### ##     ##       ##
 ##   ##  ##       ##   ### ##     ## ##   ### ##     ## ##    ##
##     ## ######## ##    ##  #######  ##    ##  #######   ######


XenonOS is a fork of the oneye project.
XenonOS Copyright © 2019 Trinity (touhouboi@protonmail.com)

Original Copyright
------------------------------------------
https://oneye-project.org
Copyright © 2005 - 2010 eyeos Team (team@eyeos.org)
             since 2010 Lars Knickrehm (mail@lars-sh.de)

*/

global $currentUser;

include_once(XENONOS_ROOT . '/' . APP_DIR . '/xenonNav/libs.xecode');

$conf = xenonXML('getXMLconfig', array('xenonNav','conf.xml'));
$url = XENONOS_ROOT . '/' . APP_DIR . '/xenonNav/plugins/';
$url2 = $url . $conf['xenonNav'][0]['plugin'][0] . XE_CODE_EXTENSION;

if (vfs('real_fileExists', array ($url2)))
{
	include_once($url2);
}
else
{
	include_once($url . 'iframe.xecode');
}

function xenonNav_on_Message($params = '')
{
	eyeWidgets('updateContent', $params);
}

function xenonNav_on_Resize($params = '')
{
	$GLOBALS['xenonNav_window']->width = intval($params['arg'][0]);
	$GLOBALS['xenonNav_window']->height = intval($params['arg'][1]);
	$GLOBALS['xenonNav_url']->setWidth($GLOBALS['xenonNav_window']->width - 207);
  $GLOBALS['xenonNav_image_url_right']->setX($GLOBALS['xenonNav_url']->width - -23);
	$GLOBALS['xenonNav_window_box']->setHeight($GLOBALS['xenonNav_window']->height - $GLOBALS['xenonNav_url']->y - 65);
	$GLOBALS['xenonNav_line']->setHeight($GLOBALS['xenonNav_window_box']->height);
	$GLOBALS['xenonNav_frame']->setHeight($GLOBALS['xenonNav_window_box']->height);

	if ($GLOBALS['xenonNav_box'])
	{
		$GLOBALS['xenonNav_frame']->setX($GLOBALS['xenonNav_window_box']->width + 20);
		$GLOBALS['xenonNav_frame']->setWidth($GLOBALS['xenonNav_window']->width - $GLOBALS['xenonNav_window_box']->width - 35);
	}
	else
	{
		$GLOBALS['xenonNav_frame']->setWidth($GLOBALS['xenonNav_window']->width - 25);
		$GLOBALS['xenonNav_frame']->setX(10);
	}
}

function xenonNav_on_Fullscreen($params = '')
{
	global $myPid;

	$GLOBALS['xenonNav_window']->setFullScreen();

	if ($GLOBALS['xenonNav_window']->fullScreen)
	{
		$press = 'Press';
	}

	xenonx('rawjs',array('js' => 'e = xGetElementById("' . $myPid . '_xenonNav_toolbar");
	for (var i = 0; i < e.childNodes.length; i++) {
		if (e.childNodes[i].id == "Fullscreen_Container") {
			e.childNodes[i].className = "blockbarItem' . $press . '_right";
		}
	}'));
}

function xenonNav_on_Back($params = null)
{
	global $myPid;

	xenonx('runjs', array('js' => 'var contentWindow, frame;
	frame = parent.frames["' . strval($myPid) . '_xenonNav_frame"];
	contentWindow = frame.contentWindow ? frame.contentWindow : frame.window;
	contentWindow.history.back();'));

	xenonNav_lib_FocusFrame();
}

function xenonNav_on_Forward($params = null)
{
	global $myPid;

	xenonx('runjs', array('js' => 'var contentWindow, frame;
	frame = parent.frames["' . strval($myPid) . '_xenonNav_frame"];
	contentWindow = frame.contentWindow ? frame.contentWindow : frame.window;
	contentWindow.history.forward();'));

	xenonNav_lib_FocusFrame();
}

function xenonNav_on_Refresh($params = null)
{
	global $myPid;

	xenonx('runjs', array('js' => 'var contentDocument, frame, iframe;
	frame = parent.frames["' . strval($myPid) . '_xenonNav_frame"];
	contentDocument = frame.contentDocument ? frame.contentDocument : frame.document;
	iframe = contentDocument.getElementsByTagName("iframe")[0];
	iframe.parentNode.appendChild(iframe);'));

	xenonNav_lib_FocusFrame();
}

function xenonNav_on_Startpage($params = '')
{
	xenonNav_lib_doUrl();
}

function xenonNav_on_Bookmarks($params = '')
{
	global $myPid;

	if (is_object($GLOBALS['xenonNav_box']) && (is_object($GLOBALS['xenonNav_hidden_bookmarks_url']) && $GLOBALS['xenonNav_hidden_bookmarks_url']->text == '<none>'))
	{
		$GLOBALS['xenonNav_box']->remove();
		$GLOBALS['xenonNav_frame']->setWidth($GLOBALS['xenonNav_window']->width - 25);
		$GLOBALS['xenonNav_frame']->setX(10);
		$GLOBALS['xenonNav_line']->hide();

		$xml = xenonXML('getXMLconfig',array('xenonNav','conf.xml'));
		$xml['xenonNav'][0]['sidebar'][0] = 0;

		xenonXML('setXMLconfig',array('xenonNav','conf.xml',$xml));
	}
	else
	{
		xenonNav_lib_ShowBookmarks();

		$GLOBALS['xenonNav_frame']->setWidth($GLOBALS['xenonNav_window']->width - $GLOBALS['xenonNav_window_box']->width - 35);
		$GLOBALS['xenonNav_frame']->setX($GLOBALS['xenonNav_window_box']->width + 20);
		$GLOBALS['xenonNav_line']->unhide();

		xenonx('rawjs',array('js' => 'e = xGetElementById("' . $myPid . '_xenonNav_toolbar");
		for (var i = 0; i < e.childNodes.length; i++) {
			if (e.childNodes[i].id == "Bookmarks_Container") {
				e.childNodes[i].className = "blockbarItemPress";
			} else if (e.childNodes[i].id == "Search_Container") {
				e.childNodes[i].className = "blockbarItem";
			}
		}'));
	}
}

function xenonNav_on_nav_TREE($params = null)
{
	$item = $params['itemName'][0];
	$id = substr($item, 9);

	$GLOBALS['selectedBookmarkId_HID']->setText($id);

	$xml = xenonXML('getXMLconfig',array('xenonNav','conf.xml'));
	$bookmark = xenonNav_getBookmarkFromId($xml['xenonNav'][0]['bookmarks'][0]['bookmark'],$id);

	if ($bookmark['type'][0] == 'url')
	{
		xenonNav_lib_doUrl(array('page' => array($bookmark['url'][0])));
	}
}

function xenonNav_on_delBookmark($params = '')
{
	foreach($params as $key => $value)
	{
		if (stripos($key, 'xenonNav_box_hidden_del_') !== false)
		{
			xenonx('messageBox',
				array(
					'buttons' => array(array('delBookmark_yes','Yes'), array('delBookmark_no','No')),
					'content' => 'Do you really want to delete this bookmark?',
					'father' => 'xenonNav_window',
					'hiddens' => array(array('xenonNav_hidden_delBookmark', $value[0])),
					'img' => 'index.php?theme=' . $_SESSION['usertheme'] . '&extern=icons/48x48/editClean.png',
					'title' => 'Delete bookmark',
					'type' => 3,
					'win_name' => 'xenonNav_window_delBookmark',
					'win_removepid' => 0,
					'win_style' => TITLE + CLOSE
				)
			);

			return;
		}
	}
}

function xenonNav_getParentBookmarkFromId($xml, $id)
{
	$return = false;

	if (!is_array($xml['id']))
	{
		$xml['id'] = array('root');
	}

	foreach($xml['bookmark'] as $key => $value)
	{
		if ($value['type'][0] == 'folder')
		{
			$return = xenonNav_getParentBookmarkFromId($value, $id);
		}

		if ($value['id'][0] == $id)
		{
			$return = $xml;
		}

		if ($return !== false)
		{
			break;
		}
	}

	return($return);
}

function xenonNav_on_delBookmark_yes($params = '')
{
	$name = $GLOBALS['xenonNav_hidden_delBookmark']->text;

	if ($GLOBALS['xenonNav_hidden_bookmarks_url']->text == '<none>')
	{
		$xml = xenonXML('getXMLconfig',array('xenonNav','conf.xml'));
	}
	else
	{
		$path = $GLOBALS['xenonNav_hidden_bookmarks_url']->text;
		$xml = xenonXML('getXMLfile',array(vfs('getRealName',array($path))));
	}

	$x = xenonNav_lib_array_findIdByText(array($xml['xenonNav'][0]['bookmarks'][0]['category'], 'Uncategorized', array('name', 0)));

	if (isset($x[0]))
	{
		$y = xenonNav_lib_array_findIdByText(array($xml['xenonNav'][0]['bookmarks'][0]['category'][$x[0]]['link'], $name, array('name', 0)));

		if (isset($y[0]))
		{
			unset($xml['xenonNav'][0]['bookmarks'][0]['category'][$x[0]]['link'][$y[0]]);

			if ($GLOBALS['xenonNav_hidden_bookmarks_url']->text == '<none>')
			{
				xenonXML('setXMLconfig', array('xenonNav', 'conf.xml', $xml));
			}
			else
			{
				xenonXML('setXMLfile', array(vfs('getRealName', array($path)), $xml));
			}

			xenonx('messageBox', array('content' => 'Link successfully deleted.'));

			xenonNav_lib_ShowBookmarks();
		}
		else
		{
			xenonx('messageBox', array('content' => 'Bookmark does not exist!'));
		}
	}
	else
	{
		xenonx('messageBox', array('content' => 'Bookmark does not exist!'));
	}

	$GLOBALS['xenonNav_window_delBookmark']->close();
}

function xenonNav_on_delBookmark_no($params = '')
{
	$GLOBALS['xenonNav_window_delBookmark']->close();
}


function xenonNav_on_open_bookmarks($params = '')
{
	global $checknum;

	proc('launch',
		array ('xenonDialog',
			array (
				XENONDIALOG_TYPE_OPENFILE,
				'open_bookmarks_now',
				$checknum
			)
		)
	);
}

function xenonNav_on_open_bookmarks_now($params = '')
{
	xenonNav_lib_ShowBookmarks($params);
}

function xenonNav_on_Download($params = '')
{
	global $checknum;

	proc('launch',
		array ('xenonDialog',
			array (
				XENONDIALOG_TYPE_SAVEFILE,
				'DownloadNow',
				$checknum,
				$params['basename'][0],
				null,
				null,
				null,
				'DownloadNow'
			)
		)
	);
}

function xenonNav_on_DownloadNow($params = '')
{
	global $checknum;

	if (isset($params['arg'][0]))
	{
		proc('launch', array('xenonRename', array(um('getCurrentUserDir') . '/' . TMP_USER_DIR . '/' . $checknum . '.tmp', null, um('getCurrentUserDir') . '/' . FILES_USER_DIR . '/' . $params['arg'][0])));
	}
	else
	{
		vfs('delete', array(um('getCurrentUserDir') . '/' . TMP_USER_DIR . '/' . $checknum . '.tmp'));
	}
}

function xenonNav_on_SetAddress($params = '')
{
	$GLOBALS['xenonNav_url']->setText(base64_decode($params['address'][0]));
}

function xenonNav_on_Search($params = '')
{
	global $myPid;

	if (is_object($GLOBALS['xenonNav_box']) && (is_object($GLOBALS['xenonNav_hidden_search_url']) && $GLOBALS['xenonNav_hidden_search_url']->text == '<none>'))
	{
		$GLOBALS['xenonNav_box']->remove();
		$GLOBALS['xenonNav_frame']->setWidth($GLOBALS['xenonNav_window']->width - 25);
		$GLOBALS['xenonNav_frame']->setX(10);
		$GLOBALS['xenonNav_line']->hide();

		$xml = xenonXML('getXMLconfig',array('xenonNav','conf.xml'));
		$xml['xenonNav'][0]['sidebar'][0] = 0;

		xenonXML('setXMLconfig',array('xenonNav','conf.xml',$xml));
	}
	else
	{
		xenonNav_lib_ShowSearch();

		$GLOBALS['xenonNav_frame']->setWidth($GLOBALS['xenonNav_window']->width - $GLOBALS['xenonNav_window_box']->width - 35);
		$GLOBALS['xenonNav_frame']->setX($GLOBALS['xenonNav_window_box']->width + 20);
		$GLOBALS['xenonNav_line']->unhide();

		xenonx('rawjs', array('js' => 'e = xGetElementById("' . $myPid . '_xenonNav_toolbar");
		for (var i = 0; i < e.childNodes.length; i++) {
			if (e.childNodes[i].id == "Search_Container") {
				e.childNodes[i].className = "blockbarItemPress";
			} else if (e.childNodes[i].id == "Bookmarks_Container") {
				e.childNodes[i].className = "blockbarItem";
			}
		}'));
	}
}

function xenonNav_on_search_label($params = '')
{
	foreach($params as $key => $value)
	{
		if (stripos($key,'xenonNav_box_hiddenSearch_') !== false)
		{
			$page = str_replace('%s',$GLOBALS['xenonNav_search']->text,$value[0]);
			xenonNav_lib_doUrl(array('page' => array($page)));
		}
	}
}

function xenonNav_on_search_default($params = '')
{
	$xml = xenonXML('getXMLconfig',array('xenonNav','conf.xml'));
	$page = str_replace('%s', $GLOBALS['xenonNav_url_search']->text, $xml['xenonNav'][0]['searches'][0]['default'][0]);

	xenonNav_lib_doUrl(array('page' => array($page)));
}

function xenonNav_on_open_searches($params = '')
{
	global $checknum;

	proc('launch',
		array ('xenonDialog',
			array (
				XENONDIALOG_TYPE_OPENFILE,
				'open_searches_now',
				$checknum
			)
		)
	);
}

function xenonNav_on_open_searches_now($params = '')
{
	xenonNav_lib_ShowSearch($params);
}

function xenonNav_on_Settings($params = '')
{
	proc('launch',
		array ('xeControl',
			array (
				'category' => 'system',
				'content' => 'xenonnav',
				'hidemenu' => 1
			)
		)
	);
}

function xenonNav_on_OpenURL($params = '')
{
	xenonNav_lib_doUrl(array('page' => array($GLOBALS['xenonNav_url']->text)));
}

/**
 * bookmarking
 */
function xenonNav_on_saveUrl($params = null)
{
	$url = $params['xenonNav_url'][0];

	xenonNav_on_nav_addBookmark('root',$url);
}

function xenonNav_on_addFolder_add_BTN($params = null)
{
	$parentId = $GLOBALS['addFolder_selectedFolder_HID']->text;
	$text = $params['addFolder_name_TXTBOX'][0];
	$folderId = md5($text.microtime());

	if (empty($text))
	{
		xenonx('messageBox', array ('content' => 'You must enter a name'));
		return;
	}

	if ($parentId == 'root')
	{
		$parentId = null;
	}

	$xml = xenonXML('getXMLconfig', array ('xenonNav', 'conf.xml'));
	$new = xenonNav_addFolder($xml['xenonNav'][0]['bookmarks'][0], $text, $folderId, $parentId);
	$xml['xenonNav'][0]['bookmarks'][0] = $new;

	if (xenonXML('setXMLconfig',array('xenonNav', 'conf.xml', $xml)))
	{
		xenonx('messageBox', array ('content'=> 'Folder successfully added'));
		xenonNav_lib_refreshTree();
		xenonNav_on_addFolder_cancel_BTN();
	}
	else
	{
		xenonx('messageBox', array ('content'=> 'Error adding folder'));
	}
}

function xenonNav_on_addFolder_cancel_BTN($params = null)
{
	if ($GLOBALS['addFolder_DLG'])
	{
		$GLOBALS['addFolder_DLG']->close();
	}
}

function xenonNav_on_addBookmark_cancel_BTN($params = null)
{
	if ($GLOBALS['addBookmark_DLG'])
	{
		$GLOBALS['addBookmark_DLG']->close();
	}
}

function xenonNav_on_editBookmark_cancel_BTN($params=null) {
	if ($GLOBALS['editBookmark_DLG'])
		$GLOBALS['editBookmark_DLG']->close();
}

function xenonNav_on_editFolder_cancel_BTN($params = null)
{
	if ($GLOBALS['editFolder_DLG'])
	{
		$GLOBALS['editFolder_DLG']->close();
	}
}

function xenonNav_on_addBookmark_add_BTN($params = null)
{
	$parentId = $GLOBALS['addBookmark_selectedFolder_HID']->text;
	$name = $params['addBookmark_name_TXTBOX'][0];
	$url = $params['addBookmark_url_TXTBOX'][0];

	if (empty($name) || empty($url))
	{
		xenonx('messageBox', array ('content' => 'You must enter all fields'));
		return;
	}

	if ($parentId == 'root')
	{
		$parentId = null;
	}

	$xml = xenonXML('getXMLconfig', array('xenonNav', 'conf.xml'));

	$bookmark = array();
	$bookmark['name'] = array();
	$bookmark['id'] = array();
	$bookmark['url'] = array();
	$bookmark['type'] = array();
	$bookmark['id'][0] = md5($url.microtime());
	$bookmark['type'][0] = 'url';
	$bookmark['name'][0] = $name;
	$bookmark['url'][0] = $url;

	$new = xenonNav_addBookmark($xml['xenonNav'][0]['bookmarks'][0],$bookmark,$parentId);
	$xml['xenonNav'][0]['bookmarks'][0] = $new;

	if (xenonXML('setXMLconfig', array ('xenonNav', 'conf.xml', $xml)))
	{
		xenonx('messageBox', array ('content'=> 'Bookmark successfully added'));
		xenonNav_lib_refreshTree();
		xenonNav_on_addBookmark_cancel_BTN();
	}
	else
	{
		xenonx('messageBox', array ('content'=> 'Error adding bookmark'));
	}
}

function xenonNav_on_editBookmark_apply_BTN($params = null)
{
	$BookmarkId = $GLOBALS['editBookmark_bookmarkId_HID']->text;
	$BookmarkUrl = $GLOBALS['editBookmark_url_TXTBOX']->text;
	$BookmarkName = $GLOBALS['editBookmark_name_TXTBOX']->text;
	$newFolderId = $GLOBALS['editBookmark_selectedFolder_HID']->text;

	if ($newFolderId == 'root')
	{
		$newFolderId = null;
	}

	$xml = xenonXML('getXMLconfig', array ('xenonNav', 'conf.xml'));
	$Bookmark = xenonNav_getBookmarkFromId($xml['xenonNav'][0]['bookmarks'][0]['bookmark'], $BookmarkId);

	if ($BookmarkName)
	{
		$Bookmark['name'][0] = $BookmarkName;
	}

	if ($BookmarkUrl)
	{
		$Bookmark['url'][0] = $BookmarkUrl;
	}

	$newBookmarksToSave = xenonNav_deleteBookmarkFolder($xml['xenonNav'][0]['bookmarks'][0], $BookmarkId);
	$xml['xenonNav'][0]['bookmarks'][0] = $newBookmarksToSave;

	$newBookmarksToSave = xenonNav_addBookmark($xml['xenonNav'][0]['bookmarks'][0],$Bookmark,$newFolderId);
	$xml['xenonNav'][0]['bookmarks'][0] = $newBookmarksToSave;

	if (xenonXML('setXMLconfig', array ('xenonNav', 'conf.xml', $xml)))
	{
		xenonx('messageBox', array ('content'=> 'Bookmark successfully edited'));
		xenonNav_lib_refreshTree();
		xenonNav_on_editBookmark_cancel_BTN();
	}
	else
	{
		xenonx('messageBox', array ('content'=> 'Error editing bookmark'));
	}
}

function xenonNav_on_editFolder_apply_BTN($params = null)
{
	$BookmarkId = $GLOBALS['editFolder_bookmarkId_HID']->text;
	$BookmarkName = $GLOBALS['editFolder_name_TXTBOX']->text;
	$newFolderId = $GLOBALS['editFolder_selectedFolder_HID']->text;

	if ($newFolderId == 'root')
	{
		$newFolderId = null;
	}

	$xml = xenonXML('getXMLconfig', array('xenonNav', 'conf.xml'));
	$Bookmark = xenonNav_getBookmarkFromId($xml['xenonNav'][0]['bookmarks'][0]['bookmark'], $BookmarkId);

	if ($BookmarkName)
	{
		$Bookmark['name'][0] = $BookmarkName;
	}

	$newBookmarksToSave = xenonNav_deleteBookmarkFolder($xml['xenonNav'][0]['bookmarks'][0], $BookmarkId);
	$newBookmarksToSave = xenonNav_addBookmark($newBookmarksToSave,$Bookmark,$newFolderId);

	$xml['xenonNav'][0]['bookmarks'][0] = $newBookmarksToSave;

	if (xenonXML('setXMLconfig', array ('xenonNav', 'conf.xml', $xml)))
	{
		xenonx('messageBox', array ('content'=> 'Bookmark successfully edited'));
		xenonNav_lib_refreshTree();
		xenonNav_on_editFolder_cancel_BTN();
	}
	else
	{
		xenonx('messageBox', array ('content'=> 'Error editing bookmark'));
	}
}

function xenonNav_addBookmark($xml, $bookmark, $parentFolderId)
{
	if (!is_array($xml))
	{
		return array();
	}

	if ($xml['id'][0] == $parentFolderId || !$parentFolderId)
	{
		$xml['bookmark'][] = $bookmark;
	}
	else
	{
		if (is_array($xml['bookmark']))
		{
			foreach($xml['bookmark'] as $key => $value)
			{
				if ($value['type'][0] == 'folder')
				{
					$xml['bookmark'][$key] = xenonNav_addBookmark($value, $bookmark, $parentFolderId);
				}
			}
		}
	}

	return($xml);
}

function xenonNav_addFolder($bookmark, $folderName, $folderId, $parentFolderId)
{
	if (!is_array($bookmark))
	{
		return array ();
	}

	if ($bookmark['id'][0] == $parentFolderId || !$parentFolderId)
	{
		$bookmark['bookmark'][] = array (
			'id' => array ($folderId),
			'type' => array ('folder'),
			'name' => array ($folderName),
			'bookmark' => array ()
		);
	}
	else
	{
		if (is_array($bookmark['bookmark']))
		{
			foreach($bookmark['bookmark'] as $key => $value)
			{
				if ($value['type'][0] == 'folder')
				{
					$bookmark['bookmark'][$key] = xenonNav_addFolder($value, $folderName, $folderId, $parentFolderId);
				}
			}
		}
	}

	return($bookmark);
}

// Search Url next to url box top right
function xenonNav_on_searchFor($params = '')
{
	$xml = xenonXML('getXMLconfig', array ('xenonNav', 'conf.xml'));
	$page = str_replace('%s', $GLOBALS['xenonNav_url_search']->text, $xml['xenonNav'][0]['searches'][0]['default'][0]);

	xenonNav_lib_doUrl(array ('page' => array ($page)));
}

//Open new Nav
function xenonNav_on_NewWindow($params = '')
{
	proc('launch', array ('xenonNav'));
}

function xenonNav_on_Close($params = '')
{
	proc('end');
}
?>
