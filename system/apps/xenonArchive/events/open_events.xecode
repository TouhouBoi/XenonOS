<?php
/*
  ___  _ __   ___ _   _  ___
 / _ \| '_ \ / _ \ | | |/ _ \
| (_) | | | |  __/ |_| |  __/
 \___/|_| |_|\___|\__, |\___|
                  |___/

oneye is released under the GNU Affero General Public License Version 3 (AGPL3)
 -> provided with this release in license.txt
 -> or via web at www.gnu.org/licenses/agpl-3.0.txt

Copyright © 2005 - 2010 eyeos Team (team@eyeos.org)
             since 2010 Lars Knickrehm (mail@lars-sh.de)
*/

///
///		Dialog actions
///
 
/**
 * Only a event for select the output folder
 *
 * @param unknown_type $params
 */
function xenonArchive_on_Open($params=null){
	global $checknum;
	$options = array(
		XENONDIALOG_TYPE_OPENFILE,
		'SelectOpenFile',
		$checknum,
		'',
		array(
			'Archive files' => '*.zip|*.gz|*.tgz|*.bz2|*.tbz|*.tbz2|*.tb2|*.tar',
			'Zip files' => '*.zip',
			'GZip files' => '*.gz|*.tgz',
			'BZip files' => '*.bz2|*.tbz|*.tbz2|*.tb2',
			'Tar files' => '*.tar',
			'All files' => '*.*'
		)
	);
	proc('launch',array('xenonDialog',$options));
}



///
///		real open events (called generally by xenonDialog)
///

/**
 * A event for recive the selected folder from xenonDialog
 *
 * @param unknown_type $params
 */
function xenonArchive_on_SelectOpenFile($params = null){
	global $currentUser,$archivedExtensions,$myPid;
	
	//Getting real path (eyDialog return ~/ path).
	if (is_array($params) && isset($params['arg']) && isset($params['arg'][0])) {
		$file = um('getCurrentUserDir') . FILES_USER_DIR . '/' . $params['arg'][0];
	} else {
		$file = $GLOBALS['argSrc']->text;
	}
	
	//Getting the real extension
	$extension = utf8_strtolower(vfs('real_getExtension',array($file)));
	
	//Include the correct wrapper
	if(vfs('isDir',array($file))){
		require_once(XENONOS_ROOT.'/'.APP_DIR.'/xenonArchive/libraries/directory_wrapper.xecode');
		if($GLOBALS['workingPath']->text == '/'){
			$GLOBALS['workingPath']->setText($GLOBALS['workingPath']->text.basename($file).'.zip');
		}else{
			$GLOBALS['workingPath']->setText(dirname($GLOBALS['workingPath']->text).'/'.basename($file).'.zip');
		}
		$GLOBALS['actionLabel']->setText('Compress to...');
	}elseif(array_search($extension,$archivedExtensions) !== false){
		require_once(XENONOS_ROOT.'/'.APP_DIR.'/xenonArchive/libraries/archived_wrapper.xecode');
		$GLOBALS['actionLabel']->setText('Extract to...');
	}else{
		require_once(XENONOS_ROOT.'/'.APP_DIR.'/xenonArchive/libraries/file_wrapper.xecode');
	}

	//Getting files from source
	$content = getFiles($file);

	//Getting type (each driver have a hardcoded type).
	$type = getFileType();

	//Getting the working path (for output result)
	$workPath = $GLOBALS['workingPath']->text;

	require_once(XENONOS_ROOT.'/'.APP_DIR.'/xenonArchive/libraries/project_class.xecode');
	//Getting the project object.
	$myClass = new project(array('files'=>$content,'type'=>$type,'src'=>$file,'workPath'=>$workPath));

	//Saving the project object
	_xenonArchive_setProject($myClass);

	//Setting a started project
	$GLOBALS['projectStarted']->setText('true');

	//Print the files
	require_once(XENONOS_ROOT.'/'.APP_DIR.'/xenonArchive/libraries/main.xecode');
	_updateTable($content);
}
?>