<?php
/*
  ___  _ __   ___ _   _  ___
 / _ \| '_ \ / _ \ | | |/ _ \
| (_) | | | |  __/ |_| |  __/
 \___/|_| |_|\___|\__, |\___|
                  |___/

oneye is released under the GNU Affero General Public License Version 3 (AGPL3)
 -> provided with this release in license.txt
 -> or via web at www.gnu.org/licenses/agpl-3.0.txt

Copyright Â© 2005 - 2010 eyeos Team (team@eyeos.org)
             since 2010 Lars Knickrehm (mail@lars-sh.de)
*/

include_once(XENONOS_ROOT.'/'.APP_DIR.'/xenonFTP/lib-global'.XE_CODE_EXTENSION);
include_once(XENONOS_ROOT.'/'.APP_DIR.'/xenonFTP/lib-local'.XE_CODE_EXTENSION);
include_once(XENONOS_ROOT.'/'.APP_DIR.'/xenonFTP/lib-remote'.XE_CODE_EXTENSION);
include_once(XENONOS_ROOT.'/'.APP_DIR.'/xenonFTP/dialogs'.XE_CODE_EXTENSION);
include_once(XENONOS_ROOT.'/'.APP_DIR.'/xenonFTP/lib-ftp'.XE_CODE_EXTENSION);
include_once(XENONOS_ROOT.'/'.APP_DIR.'/xenonFTP/hosts'.XE_CODE_EXTENSION);

/*********************************************************************************************/
/*********************************************************************************************/
/*					FUNCTIONS TRIGGERED BY SIGNALS RAISED BY THE INTERFACE					 */
/*********************************************************************************************/
/*********************************************************************************************/

function xenonFTP_on_xenonFTP_remoteHome_IMG() {
	xenonFTP_browseRemote('/');
}

function xenonFTP_on_xenonFTP_refreshRemote() {
	$conf = xenonFTP_getConf();
	if ($conf['isConnectionActive']) {
		xenonFTP_refreshRemote();
	}
	else {
		xenonx('messageBox',array('content'=> 'You must connect first'));
	}
}

/**
 * @see xenonFTP_browseRemote()
 */
function xenonFTP_on_xenonFTP_browseRemote_bounced($params=null) {
	$conf = xenonFTP_getConf();
	// === BOUNCED REQUEST PROCESSING ===
	if (xenonFTP_isFromBouncedRequest($params)) {
		if ($conf['isConnectionActive']) {
			xenonFTP_ftpListDir(base64_decode($params['dir_b64'][0]));
			return;
		}
		else {
			xenonx('messageBox',array('content'=> 'You must connect first'));
		}
	}
	// === END OF BOUNCED REQUEST PROCESSING ===
}

function xenonFTP_on_xenonFTP_createFolderRemote() {
	$conf = xenonFTP_getConf();
	if ($conf['isConnectionActive']) {
		showCreateFolderDialog();
	}
	else {
		xenonx('messageBox',array('content'=> 'You must connect first'));
	}
}
/* EVENT FOR 'CREATE FOLDER' DIALOG BOX */
function xenonFTP_on_xenonFTP_newFolder_createFolder_BTN($params=null) {
	$conf = xenonFTP_getConf();
	$newFolderName = $GLOBALS['xenonFTP_newFolder_TXTBOX']->text;

	if ($newFolderName) {
		xenonFTP_logConsole('Attempting to create folder "%s" in "%s"...',
			array($GLOBALS['xenonFTP_newFolder_TXTBOX']->text,$conf['displayedCurrentRemoteDir'])
		);

		//reload files list to display changes if successful
		if (xenonFTP_ftpMkdir($conf['currentRemoteDir'],$newFolderName)) {
			xenonFTP_refreshRemote();
		}

		$GLOBALS['xenonFTP_newFolder_DLG']->close();
	}
	else {
		xenonx('messageBox',array('content'=> 'Name must not be empty'));
		return;
	}
}

function xenonFTP_on_xenonFTP_renameMoveRemote() {
	$conf = xenonFTP_getConf();
	if ($conf['isConnectionActive']) {
		if ($conf['selectedRemoteFile']) {
			showRenameDialog(array('selectedFileLocation' => xenonFTP_getFormatedDirPath(
															$conf['currentRemoteDir'].'/'.$conf['selectedRemoteFile']['name']),
									'displayedFileLocation' => xenonFTP_getFormatedDirPath(
															$conf['displayedCurrentRemoteDir'].'/'.$conf['selectedRemoteFile']['displayedName'])
			));
		}
		else {
			xenonx('messageBox',array('content'=> 'You must select a file or a folder first'));
		}
	}
	else {
		xenonx('messageBox',array('content'=> 'You must connect first'));
	}
}
/* EVENT FOR 'RENAME FILE/FOLDER' DIALOG BOX */
function xenonFTP_on_xenonFTP_rename_rename_BTN($params=null) {
	$conf = xenonFTP_getConf();
	$currentFileLocation = $GLOBALS['xenonFTP_rename_currentLocation_HID']->text;
	$newFileLocation = $GLOBALS['xenonFTP_rename_TXTBOX']->text;

	if ($newFileLocation) {
		xenonFTP_logConsole('Attempting to rename/move "%s"...',
			array($currentFileLocation)
		);

		//reload file list to display changes if successful
		if (xenonFTP_ftpRename($currentFileLocation,$newFileLocation)) {
			xenonFTP_refreshRemote();
		}

		$GLOBALS['xenonFTP_rename_DLG']->close();
	}
	else {
		xenonx('messageBox',array('content'=> 'Name must not be empty'));
		return;
	}
}

function xenonFTP_on_xenonFTP_deleteRemote() {
	$conf = xenonFTP_getConf();
	if ($conf['isConnectionActive']) {
		if ($conf['selectedRemoteFile']) {
			showConfirmDeleteDialog(array(
				'serializedFileInfos' => serialize(array(
					'location' => xenonFTP_getFormatedDirPath($conf['currentRemoteDir'].'/'.$conf['selectedRemoteFile']['name']),
					'type' => $conf['selectedRemoteFile']['type']
				))
			));
		}
		else {
			xenonx('messageBox',array('content'=> 'You must select a file or a folder first'));
		}
	}
	else {
		xenonx('messageBox',array('content'=> 'You must connect first'));
	}
}
/* EVENTS FOR 'DELETE FILE/FOLDER' DIALOG BOX */
function xenonFTP_on_xenonFTP_delete_deleteYes_BTN($params=null) {
	$conf = xenonFTP_getConf();
	$fileInfos = unserialize($GLOBALS['xenonFTP_delete_serializedFileInfos_HID']->text);

	xenonFTP_logConsole('Attempting to delete "%s"...',
		array($fileInfos['location'])
	);

	//reload file list to display changes if successful
	if (xenonFTP_ftpDelete($fileInfos['location'],$fileInfos['type'])) {
		xenonFTP_refreshRemote();
	}

	$GLOBALS['xenonFTP_delete_DLG']->close();
}
function xenonFTP_on_xenonFTP_delete_deleteNo_BTN($params=null) {
	$GLOBALS['xenonFTP_delete_DLG']->close();
}

function xenonFTP_on_xenonFTP_downloadRemote($params=null) {
	// === BOUNCED REQUEST PROCESSING ===
	if (xenonFTP_isFromBouncedRequest($params)) {
		if (! xenonFTP_ftpGetToBrowser(base64_decode($params['dir_b64'][0]), base64_decode($params['filename_b64'][0]))) {
			xenonFTP_logConsole('Unable to download file, error occured', null, xenonFTP_LOGSTYLE_ERROR);
		}
		return;
	}
	// === END OF BOUNCED REQUEST PROCESSING ===

	$conf = xenonFTP_getConf();
	if ($conf['isConnectionActive']) {
		if ($conf['selectedRemoteFile'] && $conf['selectedRemoteFile']['type'] != 'd') {
			//
			xenonFTP_logConsole('Downloading: %s',
				array(xenonFTP_getFormatedDirPath($conf['currentRemoteDir'].'/'.$conf['selectedRemoteFile']['name']))
			);

			xenonFTP_bounceRequest(array(
				'__signal' => 'xenonFTP_downloadRemote',
				'dir_b64' => base64_encode($conf['currentRemoteDir']),
				'filename_b64' => base64_encode($conf['selectedRemoteFile']['name'])
			));
		}
		else {
			xenonx('messageBox',array('content'=> 'Only files can be downloaded'));
		}
	}
	else {
		xenonx('messageBox',array('content'=> 'You must connect first'));
	}
}
function xenonFTP_on_xenonFTP_downloadRemote_finished($params=null) {
	if ($params == null) exit;
	$params = unserialize(urldecode($params));
	$tmpFilePath = $params['tmpfilepath'];

	$filesize = vfs('real_filesize', array($tmpFilePath));
	if ($filesize !== false) {
		$content = vfs('real_getFileContent',array($tmpFilePath));

		header('Content-Type: application/octet-stream');
		header('Content-Length: '.$filesize);
		header('Content-Disposition: attachment; filename="'.$params['filename'].'"');
		echo $content;

		//once file's content has been read, the file could be deleted to avoid space wasting
		//but if download fails, the file will have to be transfered to oneye server again :(
		//unlink($tmpFilePath);
	}
	exit;
}

function xenonFTP_on_xenonFTP_uploadRemote($params=null) {
	$conf = xenonFTP_getConf();
	if ($conf['isConnectionActive']) {
		showUploadDialog(array('path' => $conf['currentRemoteDir'],
								'displayedPath' => $conf['displayedCurrentRemoteDir']
								));
	}
	else {
		xenonx('messageBox',array('content'=> 'You must connect first'));
	}
}

/* EVENTS FOR 'UPLOAD FILE' DIALOG BOX */
function xenonFTP_on_xenonFTP_uploadRemote_initForm($params=null) {
	global $checknum;
	$pathDisplayed = urldecode($_GET['params'][0]);
	if (! $pathDisplayed) {
		$pathDisplayed = '[unknown]';
	}

	echo '<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title></title>
	</head>
	<body>
		<form action="index.php?checknum=' . $checknum . '&amp;msg=xenonFTP_uploadRemote_uploadComplete" enctype="multipart/form-data" method="POST">
			<div style="font-family: Verdana,Arial,sans-serif,FreeSans; font-size: 11px; left: 5px; position: absolute; top: 20px;">
				' . utf8_htmlspecialchars(i18n('translate', array('Select a file to upload to path:')), ENT_QUOTES) . '
				<br />
				&nbsp; &nbsp; &nbsp; <span style="font-style: italic;">' . $pathDisplayed . '</span>
			</div>
			<input name="myFile" style="font-family: Verdana,Arial,sans-serif,FreeSans; font-size: 11px; left: 5px; position: absolute; top: 60px;" type="file" />
			<input style="font-family: Verdana,Arial,sans-serif,FreeSans; font-size: 11px; left: 5px; position: absolute; top: 90px;" type="submit" value="' . utf8_htmlspecialchars(i18n("translate",array('Upload')), ENT_QUOTES) . '" />
		</form>
	</body>
</html>';
	exit;
}
/**
 * Note: The following code is *not* executed during an AJAX request.
 */
function xenonFTP_on_xenonFTP_uploadRemote_uploadComplete() {
	global $checknum;
	$remotePath = $GLOBALS['xenonFTP_upload_path_HID']->text;
	$sendMsgParams = 'window.parent.eyeParam("remotePath","'.$remotePath.'")'.
					'+window.parent.eyeParam("filename","'.$_FILES['myFile']['name'].'")';

	if (is_uploaded_file($_FILES['myFile']['tmp_name'])) {
		if (xenonFTP_ftpPutFromBrowser($_FILES['myFile']['tmp_name'], $remotePath, basename($_FILES['myFile']['name']))) {
			$sendMsgParams .= '+window.parent.eyeParam("statut","UPLOAD_SUCCESS")';
		}
		else {
			$sendMsgParams .= '+window.parent.eyeParam("statut","UPLOAD_FTP_FAILED")';
		}
	}
	else {
		$sendMsgParams .= '+window.parent.eyeParam("statut","UPLOAD_PHP_FAILED")';
	}
	header('Content-type: text/html; charset="utf-8"');
	echo '<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
		<title></title>
	</head>
	<body onload=\'window.parent.sendMsg(' . $checknum . ',"xenonFTP_uploadRemote_notifyEndOfUpload",' . $sendMsgParams . ');\'></body>
</html>';
	exit;
}
function xenonFTP_on_xenonFTP_uploadRemote_notifyEndOfUpload($params=null) {
	$conf = xenonFTP_getConf();

	$GLOBALS['xenonFTP_upload_DLG']->close();
	switch ($params['statut'][0]) {
		//success
		case 'UPLOAD_SUCCESS':
			xenonFTP_logConsole('File "%s" successfully uploaded to "%s"',
				array($params['filename'][0],$params['remotePath'][0]),
				xenonFTP_LOGSTYLE_SUCCESS
			);
			if ($conf['currentRemoteDir'] == $params['remotePath'][0]) {
				xenonFTP_refreshRemote();
			}
			break;

		//error: file not uploaded to oneye
		case 'UPLOAD_PHP_FAILED':
			xenonFTP_logConsole('Error, can\'t upload file "%s" to XenonOS Server (check maximum filesize accepted by PHP?)',
				array($params['filename'][0]),
				xenonFTP_LOGSTYLE_ERROR
			);
			break;

		//error: file not (entirely?) transfered to FTP
		case 'UPLOAD_FTP_FAILED':
			xenonFTP_logConsole('Error, can\'t upload file "%s" to FTP server',
				array($params['filename'][0]),
				xenonFTP_LOGSTYLE_ERROR
			);
			if ($conf['currentRemoteDir'] == $params['remotePath'][0]) {
				xenonFTP_refreshRemote();
			}
			break;

		default:
			xenonFTP_logConsole('Unknown error occured during upload operation', null, xenonFTP_LOGSTYLE_ERROR);
	}
}

/*********************************************************************************************/
//		TABLE CLICKS MANAGEMENT
/*********************************************************************************************/

function xenonFTP_on_xenonFTP_remoteFilesClick($params=null) {
	xenonFTP_setActiveView('remote');
}

function xenonFTP_on_xenonFTP_remoteFilesDblClick($params=null) {
	$conf = xenonFTP_getConf();
	if ($conf['isConnectionActive']) {
		//browse only if selected element is a directory
		switch ($conf['selectedRemoteFile']['type']) {
			case 'd':
				xenonFTP_browseRemote($conf['currentRemoteDir'].'/'.$conf['selectedRemoteFile']['name']);
				break;

			case '-':
				xenonFTP_on_xenonFTP_transferToLeft_IMG();
				break;
		}
	}
}

?>