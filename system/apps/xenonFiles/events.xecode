<?php
/*
  ___  _ __   ___ _   _  ___
 / _ \| '_ \ / _ \ | | |/ _ \
| (_) | | | |  __/ |_| |  __/
 \___/|_| |_|\___|\__, |\___|
                  |___/

oneye is released under the GNU Affero General Public License Version 3 (AGPL3)
 -> provided with this release in license.txt
 -> or via web at www.gnu.org/licenses/agpl-3.0.txt

Copyright Â© 2005 - 2010 eyeos Team (team@eyeos.org)
             since 2010 Lars Knickrehm (mail@lars-sh.de)
*/

function xenonFiles_on_Close($params = '') {
	proc('end');
}

function xenonFiles_on_Message($params = '') {
	xenonWidgets('updateContent',$params);
}

function xenonFiles_on_Resize($params = '') {
	global $myPid;
	$GLOBALS['xenonFiles_Box_Tree']->setHeight(intval($params['arg'][1]) - 155);
	if (is_object($GLOBALS['xenonFiles_Box_Tree_Tree'])) {
		$GLOBALS['xenonFiles_Box_Tree_Tree']->setHeight($GLOBALS['xenonFiles_Box_Tree']->height - 45);
	}
	$GLOBALS['xenonFiles_Window']->width = $params['arg'][0];
	$GLOBALS['xenonFiles_Window']->height = $params['arg'][1];
	$GLOBALS['xenonFiles_Box_View']->setHeight($GLOBALS['xenonFiles_Box_Tree']->height);
	$GLOBALS['xenonFiles_Box_View_Container2']->setHeight($GLOBALS['xenonFiles_Box_View']->height - 35);
	$GLOBALS['xenonFiles_Box_Actions']->setHeight($GLOBALS['xenonFiles_Box_Tree']->height);
	$GLOBALS['xenonFiles_Box_Actions_menu_files_Container']->setHeight($GLOBALS['xenonFiles_Box_Actions']->height - 35);
	$GLOBALS['xenonFiles_Box_Actions_menu_trash_Container']->setHeight($GLOBALS['xenonFiles_Box_Actions']->height - 35);
	$GLOBALS['xenonFiles_Textbox_Path']->setWidth(intval($params['arg'][0]) - $GLOBALS['xenonFiles_Box_Tree']->width - 57);
	$GLOBALS['xenonFiles_Imagebox_Path_Right']->setX($GLOBALS['xenonFiles_Textbox_Path']->x + $GLOBALS['xenonFiles_Textbox_Path']->width);
	$GLOBALS['xenonFiles_Container']->setHeight($GLOBALS['xenonFiles_Box_Tree']->height + 35);
	$GLOBALS['xenonFiles_Container']->setWidth($GLOBALS['xenonFiles_Textbox_Path']->width + 32);
	if ($GLOBALS['xenonFiles_Box_View_Radio_Details']->checked) {
		$GLOBALS['xenonFiles_View_Details_Sortabletable']->setHeight($GLOBALS['xenonFiles_Container']->height - 2);
		$GLOBALS['xenonFiles_View_Details_Sortabletable']->setWidth($GLOBALS['xenonFiles_Container']->width - 2);
	} elseif ($GLOBALS['xenonFiles_Box_View_Radio_List']->checked) {
		xenonx('rawjs',array('js' => 'i = 0;
		x = 20;
		y = 20;
		e = xGetElementById("' . $myPid . '_xenonFiles_View_List_Icon_0_Container");
		while (e) {
			xSlideTo("' . $myPid . '_xenonFiles_View_List_Icon_" + i + "_Container",x,y,500);
			y += 30;
			if (xHeight("' . $myPid . '_xenonFiles_Container") - y - 30 < 0) {
				x += 140;
				y = 20;
			}
			i++;
			e = xGetElementById("' . $myPid . '_xenonFiles_View_List_Icon_" + i + "_Container");
		}'));
	} else {
		xenonx('rawjs',array('js' => 'i = 0;
		x = 20;
		y = 20;
		e = xGetElementById("' . $myPid . '_xenonFiles_View_Icons_Icon_0_Container");
		while (e) {
			xSlideTo("' . $myPid . '_xenonFiles_View_Icons_Icon_" + i + "_Container",x,y,500);
			x += 88;
			if (xWidth("' . $myPid . '_xenonFiles_Container") - x - 88 < 0) {
				x = 20;
				y += 88;
			}
			i++;
			e = xGetElementById("' . $myPid . '_xenonFiles_View_Icons_Icon_" + i + "_Container");
		}'));
	}
}

function xenonFiles_on_Fullscreen($params = '') {
	global $myPid;
	$GLOBALS['xenonFiles_Window']->setFullScreen();
	if ($GLOBALS['xenonFiles_Window']->fullScreen) {
		$press = 'Press';
	}
	xenonx('rawjs',array('js' => 'e = xGetElementById("' . $myPid . '_xenonFiles_Toolbar");
	for (var i = 0; i < e.childNodes.length; i++) {
		if (e.childNodes[i].id == "' . $myPid . '_Fullscreen_Container") {
			e.childNodes[i].className = "blockbarItem' . $press . '_right";
		}
	}'));
}

function xenonFiles_on_Back($params = '') {
	global $myPid;
	$_SESSION['xenonFiles'][$myPid]['history']['position']--;
	if ($_SESSION['xenonFiles'][$myPid]['history']['position'] < 0) {
		$_SESSION['xenonFiles'][$myPid]['history']['position'] = 0;
		xenonFiles_on_OpenPath(array($GLOBALS['xenonFiles_Hidden_Path']->text . '/../','nohistory' => 1));
	} else {
		xenonFiles_on_OpenPath(array($_SESSION['xenonFiles'][$myPid]['history']['list'][$_SESSION['xenonFiles'][$myPid]['history']['position']],'nohistory' => 1));
	}
}

function xenonFiles_on_GoUp($params = '') {
	xenonFiles_on_OpenPath(array($GLOBALS['xenonFiles_Hidden_Path']->text . '/../'));
}

function xenonFiles_on_Next($params = '') {
	global $myPid;
	$_SESSION['xenonFiles'][$myPid]['history']['position']++;
	if (isset($_SESSION['xenonFiles'][$myPid]['history']['position']) === true && $_SESSION['xenonFiles'][$myPid]['history']['list'][$_SESSION['xenonFiles'][$myPid]['history']['position']]) {
		xenonFiles_on_OpenPath(array($_SESSION['xenonFiles'][$myPid]['history']['list'][$_SESSION['xenonFiles'][$myPid]['history']['position']],'nohistory' => 1));
	} else {
		$_SESSION['xenonFiles'][$myPid]['history']['position']--;
	}
}

function xenonFiles_on_Home($params = '') {
	xenonFiles_on_OpenPath(array('/','home'));
}

function xenonFiles_on_Groups($params = '') {
	xenonFiles_on_OpenPath(array('/','groups'));
}

function xenonFiles_on_Trash($params = '') {
	xenonFiles_on_OpenPath(array('/','trash'));
}

function xenonFiles_on_Users($params = '') {
	xenonFiles_on_OpenPath(array('/','users'));
}

function xenonFiles_on_Real($params = '') {
	xenonFiles_on_OpenPath(array('/','real'));
}

function xenonFiles_on_Upload($params = '') {
	proc('launch',array('xenonUpload',array($GLOBALS['xenonFiles_Hidden_Path']->text)));
}

function xenonFiles_on_NewFolder($params = '') {
	proc('launch',array('xenonMKDir',array($GLOBALS['xenonFiles_Hidden_Path']->text)));
}

function xenonFiles_on_NewFile($params = '') {
	proc('launch',array('newFile',array($GLOBALS['xenonFiles_Hidden_Path']->text)));
}

function xenonFiles_on_Paste($params = '') {
	proc('launch',array('xenonPaste',array($GLOBALS['xenonFiles_Hidden_Path']->text)));
}

function xenonFiles_on_EmptyTrash($params = '') {
	proc('launch',array('emptyTrash'));
}

function xenonFiles_on_Help($params = '') {
	proc('launch',array('xenonHelp','xenonFiles'));
}

function xenonFiles_on_Action($params = '') {
	global $myPid;
	$path = xenonFiles('cleanPath',array($GLOBALS['xenonFiles_Hidden_Path']->text));
	if (isset($params['File']) === true && $params['File'][0]) {
		if ($params['Action'][0] == 'launch') {
			$xml = xenonXML('getXMLfile',array($path[0] . '/' . $params['File'][0]));
			xenonFiles('launchCommand',array($xml['eyeLink'][0]['content'][0], $xml['eyeLink'][0]['xArgs'][0]));
		} else {
			proc('launch',array($params['Action'][0],array($path[1] . '://' . $path[2] . '/' . $params['File'][0])));
		}
	} else {
		if ($GLOBALS['xenonFiles_Hidden_Action']->text != '') {
			$father = 'files';
			if ($path[1] == 'trash') {
				$father = 'trash';
			} elseif ($path[1] == 'real') {
				$father = 'real';
			}
			xenonx('rawjs',array('js' => 'e = xGetElementById("' . $myPid . '_xenonFiles_Box_Actions_menu_' . $father . '_Container_' . $GLOBALS['xenonFiles_Hidden_Action']->text . '_Container"); e.className = ""; e.style.backgroundColor = "";'));
		}
		$GLOBALS['xenonFiles_Hidden_Action']->setText($params['Action'][0]);
	}
}

function xenonFiles_on_GetThumbnail($params = '') {
	xenonFiles('createThumbnail',array($GLOBALS['xenonFiles_Hidden_Path']->text,$params['File'][0]));
}

function xenonFiles_on_Icon_Clicked($params = '') {
	global $myPid;
	$path = xenonFiles('cleanPath',array($GLOBALS['xenonFiles_Hidden_Path']->text));
	if ($params['arg0'][0]) {
		$file = $params['arg0'][0];
		if ($GLOBALS['xenonFiles_Hidden_Action']->text != '') {
			proc('launch',array($GLOBALS['xenonFiles_Hidden_Action']->text,array($path[1] . '://' . $path[2] . '/' . $params['arg0'][0])));
			$father = 'files';
			if ($path[1] == 'trash') {
				$father = 'trash';
			} elseif ($path[1] == 'real') {
				$father = 'real';
			}
			xenonx('rawjs',array('js' => 'e = xGetElementById("' . $myPid . '_xenonFiles_Box_Actions_menu_' . $father . '_Container_' . $GLOBALS['xenonFiles_Hidden_Action']->text . '_Container"); e.className = ""; e.style.backgroundColor = "";'));
			$GLOBALS['xenonFiles_Hidden_Action']->setText('');
			return;
		}
	} else {
		$file = $GLOBALS['xenonFiles_View_Details_Sortabletable']->selected;
	}
	if ($path[1] == 'trash') {
		proc('launch',array('restoreTrash',array($file)));
	} else {
		$path[0] .= '/' . $file;
		if (vfs('isdir',array($path[0]))) {
			xenonFiles_on_OpenPath(array($path[2] . '/' . $file,$path[1]));
		} elseif (strtolower(substr($path[0], -strlen('.' . XENONOS_LINK_EXT))) === '.' . strtolower(XENONOS_LINK_EXT) && vfs('real_fileExists', array($path[0])) === true) { // utf8
			$xml = xenonXML('getXMLfile', array($path[0]));
			xenonFiles('launchCommand', array($xml['eyeLink'][0]['content'][0], $xml['eyeLink'][0]['xArgs'][0]));
		} elseif ($path[1] === 'real') {
			xenonx('messageBox', array('content' => 'Opening files in real mode is not allowed.'));
		} else {
			$xml = getConfig('filetypes', utf8_strtolower(substr(strrchr($path[0], '.'), 1)) . '.xml'); // utf8
			if ($xml['fileType'][0]['app'][0]) {
				proc('launch',array($xml['fileType'][0]['app'][0],$path[0]));
			} else {
				proc('launch',array('xenonOpen',$path[0]));
			}
		}
	}
}

function xenonFiles_on_Icon_Dropped($params = '') {
	if (in_array( /* utf8 */ strtolower($params['arg0'][0]), array('file','folder','link')) === true) {
		proc('launch',array('moveDrag',array($params['arg1'][0],$params['arg2'][0])));
	}
}

function xenonFiles_on_UpdateView($params = '') {
	$xml = xenonXML('getXMLconfig',array('xenonFiles','conf.xml'));
	if ($GLOBALS['xenonFiles_Box_View_Radio_Details']->checked) {
		$xml['xenonFiles'][0]['View'][0] = 3;
	} elseif ($GLOBALS['xenonFiles_Box_View_Radio_List']->checked) {
		$xml['xenonFiles'][0]['View'][0] = 2;
	} else {
		$xml['xenonFiles'][0]['View'][0] = 1;
	}
	xenonXML('setXMLconfig',array('xenonFiles','conf.xml',$xml));
	xenonFiles_on_OpenPath();
}

function xenonFiles_on_OpenPath($params = '') {
	global $myPid;
	if (isset($params[0])) {
		$path = $params[0];
		$type = null;
		if (isset($params[1]) === true) {
			$type = $params[1];
		}
	} else {
		$path = $GLOBALS['xenonFiles_Textbox_Path']->text;
		$type = '';
	}
	$path = xenonFiles('cleanPath',array($path,$type));
	$show = $path[2];
	$type = $path[1];
	$path = $path[0];

	if (isset($params['nohistory']) === false || !$params['nohistory']) {
		$position = $_SESSION['xenonFiles'][$myPid]['history']['position'];
		if (isset($_SESSION['xenonFiles'][$myPid]['history']['list'][$position]) === false || $_SESSION['xenonFiles'][$myPid]['history']['list'][$position] != $type . '://' . $show) {
			$_SESSION['xenonFiles'][$myPid]['history']['position']++;
			$_SESSION['xenonFiles'][$myPid]['history']['list'] = array_slice($_SESSION['xenonFiles'][$myPid]['history']['list'],0,$_SESSION['xenonFiles'][$myPid]['history']['position']);
			$_SESSION['xenonFiles'][$myPid]['history']['list'][] = $type . '://' . $show;
		}
	}

	if ($GLOBALS['xenonFiles_Hidden_Action']->text != '') {
		$father = 'files';
		if ($type == 'trash') {
			$father = 'trash';
		} elseif ($type == 'real') {
			$father = 'real';
		}
		xenonx('rawjs',array('js' => 'e = xGetElementById("' . $myPid . '_xenonFiles_Box_Actions_menu_' . $father . '_Container_' . $GLOBALS['xenonFiles_Hidden_Action']->text . '_Container"); e.className = ""; e.style.backgroundColor = "";'));
		$GLOBALS['xenonFiles_Hidden_Action']->setText('');
	}
	xenonx('rawjs',array('js' => 'e = xGetElementById("' . $myPid . '_xenonFiles_Window_Content").style.backgroundImage = "url(index.php?theme=' . $_SESSION['usertheme'] . '&extern=images/windows/bg-' . $type . '.png)";'));
	if ($show == '/') {
		$title = i18n('translate', array( /* utf8 */ ucfirst($type)));
	} else {
		$title = basename($show);
	}
	$GLOBALS['xenonFiles_Window']->setTitle($title . ' - ' . i18n('translate',array('Files Manager')));
	$show2 = $type . '://' . $show;
	if ($show2 != $GLOBALS['xenonFiles_Textbox_Path']->text) {
		$GLOBALS['xenonFiles_Textbox_Path']->setText($show2);
	}
	$GLOBALS['xenonFiles_Hidden_Path']->setText($show2);
	$xenonFiles_noactions = 1;
	if ($type == 'trash') {
		$GLOBALS['xenonFiles_Box_Actions_menu_files_Container']->hide();
		$GLOBALS['xenonFiles_Box_Actions_menu_trash_Container']->unhide();
		$hide = 'e.childNodes[i].id == "' . $myPid . '_Upload_Container" || e.childNodes[i].id == "' . $myPid . '_NewFolder_Container" || e.childNodes[i].id == "' . $myPid . '_NewFile_Container"';
		$unhide = 'e.childNodes[i].id == "ActionsLine" || e.childNodes[i].id == "' . $myPid . '_EmptyTrash_Container"';
	} elseif ($type === 'groups' && $show === '/' || $type === 'users' && /* utf8 */ substr_count($show, '/') < 2) {
		$xenonFiles_noactions = 0;
		$GLOBALS['xenonFiles_Box_Actions_menu_files_Container']->hide();
		$GLOBALS['xenonFiles_Box_Actions_menu_trash_Container']->hide();
		$hide = 'e.childNodes[i].id == "ActionsLine" || e.childNodes[i].id == "' . $myPid . '_Upload_Container" || e.childNodes[i].id == "' . $myPid . '_NewFolder_Container" || e.childNodes[i].id == "' . $myPid . '_NewFile_Container" || e.childNodes[i].id == "' . $myPid . '_EmptyTrash_Container"';
		$unhide = '1 == 2';
	} else {
		$hide = 'e.childNodes[i].id == "' . $myPid . '_EmptyTrash_Container"';
		$unhide = 'e.childNodes[i].id == "ActionsLine" || e.childNodes[i].id == "' . $myPid . '_Upload_Container" || e.childNodes[i].id == "' . $myPid . '_NewFolder_Container" || e.childNodes[i].id == "' . $myPid . '_NewFile_Container"';
		$GLOBALS['xenonFiles_Box_Actions_menu_files_Container']->unhide();
		$GLOBALS['xenonFiles_Box_Actions_menu_trash_Container']->hide();
	}
	xenonx('rawjs',array('js' => 'e = xGetElementById("' . $myPid . '_xenonFiles_Toolbar");
	for (var i = 0; i < e.childNodes.length; i++) {
		if (e.childNodes[i].id == "' . $myPid . '_' . /* utf8 */ ucfirst($type) . '_Container") {
			e.childNodes[i].className = "blockbarItemPress";
		} else if (e.childNodes[i].id == "' . $myPid . '_Home_Container" || e.childNodes[i].id == "' . $myPid . '_Groups_Container" || e.childNodes[i].id == "' . $myPid . '_Trash_Container" || e.childNodes[i].id == "' . $myPid . '_Users_Container" || e.childNodes[i].id == "' . $myPid . '_Real_Container") {
			e.childNodes[i].className = "blockbarItem";
		}
		if (' . $unhide . ') {
			e.childNodes[i].style.display = "";
		} else if (' . $hide . ') {
			e.childNodes[i].style.display = "none";
		}
	}'));

	if (isset($GLOBALS['xenonFiles_Container']) === true && is_object($GLOBALS['xenonFiles_Container']) === true) {
		$GLOBALS['xenonFiles_Container']->remove();
	}
	$myContainer = new Container(array(
		'father' => 'xenonFiles_Window_Content',
		'height' => $GLOBALS['xenonFiles_Box_Tree']->height + 35,
		'name' => 'xenonFiles_Container',
		'width' => $GLOBALS['xenonFiles_Textbox_Path']->width + 32,
		'x' => $GLOBALS['xenonFiles_Textbox_Path']->x - 11,
		'y' => $GLOBALS['xenonFiles_Box_Tree']->y + 25
	));
	$myContainer->show();
	$myContainer->setCss(array('display' => 'block','overflow' => 'auto','position' => 'absolute'));
	xenonWidgets('serialize',array($myContainer));

	if ($GLOBALS['xenonFiles_Box_View_Radio_Details']->checked) {
		include(XENONOS_ROOT . '/' . APP_DIR . '/xenonFiles/views/details' . XE_CODE_EXTENSION);
	} elseif ($GLOBALS['xenonFiles_Box_View_Radio_List']->checked) {
		include(XENONOS_ROOT . '/' . APP_DIR . '/xenonFiles/views/list' . XE_CODE_EXTENSION);
	} else {
		include(XENONOS_ROOT . '/' . APP_DIR . '/xenonFiles/views/icons' . XE_CODE_EXTENSION);
	}
	xenonFiles_on_ChangeBox();
	return $type;
}

function xenonFiles_on_OpenTree($params = '') {
	$type = xenonFiles('cleanPath',array($GLOBALS['xenonFiles_Hidden_Path']->text));
	$path = substr($GLOBALS['xenonFiles_Box_Tree_Tree']->selected, strlen(i18n('translate', array(ucfirst($type[1]))))); // utf8
	xenonFiles_on_OpenPath(array($path,$type[1]));
}

function xenonFiles_on_ChangeBox($params = array()) {
	global $currentUser;
	global $myPid;
	if (isset($params['Box'][0]) === true && in_array($params['Box'][0],array('Tree','View','Actions'))) {
		$path = xenonFiles('cleanPath',array($GLOBALS['xenonFiles_Hidden_Path']->text));
		if ($GLOBALS['xenonFiles_Hidden_Action']->text != '') {
			$father = 'files';
			if ($path[1] == 'trash') {
				$father = 'trash';
			} elseif ($path[1] == 'real') {
				$father = 'real';
			}
			xenonx('rawjs',array('js' => 'e = xGetElementById("' . $myPid . '_xenonFiles_Box_Actions_menu_' . $father . '_Container_' . $GLOBALS['xenonFiles_Hidden_Action']->text . '_Container"); e.className = ""; e.style.backgroundColor = "";'));
			$GLOBALS['xenonFiles_Hidden_Action']->setText('');
		}
		$GLOBALS['xenonFiles_Hidden_Box']->setText($params['Box'][0]);
		$xml = xenonXML('getXMLconfig',array('xenonFiles','conf.xml'));
		$xml['xenonFiles'][0]['Box'][0] = $params['Box'][0];
		xenonXML('setXMLconfig',array('xenonFiles','conf.xml',$xml));
	}
	if ($GLOBALS['xenonFiles_Hidden_Box']->text == 'Tree') {
		$path = xenonFiles('cleanPath',array($GLOBALS['xenonFiles_Hidden_Path']->text));
		if (isset($GLOBALS['xenonFiles_Box_Tree_Tree']) === true && is_object($GLOBALS['xenonFiles_Box_Tree_Tree']) === true) {
			$GLOBALS['xenonFiles_Box_Tree_Tree']->remove();
		}
		$myTree = new Tree(array(
			'clickTree' => 1,
			'father' => 'xenonFiles_Box_Tree',
			'height' => $GLOBALS['xenonFiles_Box_Tree']->height - 45,
			'name' => 'xenonFiles_Box_Tree_Tree',
			'signal' => 'OpenTree',
			'width' => $GLOBALS['xenonFiles_Box_Tree']->width - 8,
			'x' => 1,
			'y' => 25
		));
		$myTree->show();
		$myTree->setCss(array('overflow' => 'auto'));
		$myTree->addItem('xenonFiles_Box_Tree_Tree','item_' . $path[1], i18n('translate', array( /* utf8 */ ucfirst($path[1]))));
		if (!in_array($path[1],array('groups','users'))) {
			$myWidgetDrop = new widgetDrop(array(
				'father' => 'item_' . $path[1],
				'name' => 'item_' . $path[1] . '_WidgetDrop'
			));
			$myWidgetDrop->show();
			$myWidgetDrop->addBehaviour(array(
				'type' => 'widgetDrop_simpleMsg',
				'params' => array(
					'content' => array($path[1] . '://'),
					'pid' => $myPid,
					'signal' => 'Icon_Dropped'
			)));
		}
		$myTree->addSubList('item_' . $path[1],'list_' . $path[1]);
		include_once(XENONOS_ROOT . '/' . APP_DIR . '/xenonFiles/lib' . XE_CODE_EXTENSION);
		if ($path[1] == 'groups') {
			$content = array();
			$xml = um('retrieveUser',array($currentUser));
			foreach ($xml['eyeUser'][0]['group'] as $group) {
				$folder = XENONOS_ROOT . '/' . GROUPS_DIR . '/' . basename($group) . '/';
				if (vfs('isdir',array($folder))) {
					$md5 = md5(realpath($folder . '/' . FILES_GROUP_DIR . '/'));
					$myTree->addItem('list_' . $path[1],'item_' . FILES_GROUP_DIR . '_' . $md5,basename($folder));
					$myWidgetDrop = new widgetDrop(array(
						'father' => 'item_' . FILES_GROUP_DIR . '_' . $md5,
						'name' => 'item_' . FILES_GROUP_DIR . '_' . $md5 . '_WidgetDrop'
					));
					$myWidgetDrop->show();
					$myWidgetDrop->addBehaviour(array(
						'type' => 'widgetDrop_simpleMsg',
						'params' => array(
							'content' => array($path[1] . '://' . basename($folder)),
							'pid' => $myPid,
							'signal' => 'Icon_Dropped'
					)));
					$myTree->addSubList('item_' . FILES_GROUP_DIR . '_' . $md5,'list_' . FILES_GROUP_DIR . '_' . $md5);
					$expand = realpath($path[0] . '/');
					if ( /* utf8 */ strpos($expand, realpath($folder)) === 0 && $expand !== realpath($folder . '/')) {
						xenonFiles_lib_CreateTree($path[1],$path[1] . '://' . basename($folder),$folder . '/' . FILES_GROUP_DIR . '/',$myTree,'list_' . FILES_GROUP_DIR . '_' . $md5,$expand);
					}
				}
				$content[] = $folder;
			}
		} elseif ($path[1] == 'users') {
			$content = vfs('getDirContent',array($path[3]));
			foreach ($content as $folder) {
				if (vfs('isdir',array($folder))) {
					$md5 = md5(realpath($folder . '/'));
					$tree = 'list_' . basename($folder) . '_' . $md5;
					$myTree->addItem('list_' . $path[1],'item_' . basename($folder) . '_' . $md5,basename($folder));
					$myTree->addSubList('item_' . basename($folder) . '_' . $md5,$tree);
					if ( /* utf8 */ strpos(realpath($path[0] . '/'), realpath($path[3])) === 0 && realpath($path[0] . '/') !== realpath($path[3] . '/')) {
						$content2 = vfs('getDirContent',array($folder));
						foreach ($content2 as $folder) {
							if (vfs('isdir',array($folder))) {
								$md5 = md5(realpath($folder . '/' . FILES_USER_DIR . '/'));
								$myTree->addItem($tree,'item_' . FILES_USER_DIR . '_' . $md5,basename($folder));
								$myWidgetDrop = new widgetDrop(array(
									'father' => 'item_' . FILES_USER_DIR . '_' . $md5,
									'name' => 'item_' . FILES_USER_DIR . '_' . $md5 . '_WidgetDrop'
								));
								$myWidgetDrop->show();
								$myWidgetDrop->addBehaviour(array(
									'type' => 'widgetDrop_simpleMsg',
									'params' => array(
										'content' => array($path[1] . '://' . substr($folder, strlen(XENONOS_ROOT . '/' . USERS_DIR . '/'))), // utf8
										'pid' => $myPid,
										'signal' => 'Icon_Dropped'
								)));
								$myTree->addSubList('item_' . FILES_USER_DIR . '_' . $md5,'list_' . FILES_USER_DIR . '_' . $md5);
								if ( /* utf8 */ strpos(realpath($path[0] . '/'), realpath($folder . '/' . FILES_USER_DIR)) === 0 && realpath($path[0] . '/') !== realpath($folder . '/')) {
									xenonFiles_lib_CreateTree($path[1], $path[1] . '://' . substr($folder, strlen(XENONOS_ROOT . '/' . USERS_DIR . '/')), $folder . '/' . FILES_USER_DIR . '/', $myTree, 'list_' . FILES_USER_DIR . '_' . $md5, realpath($path[0] . '/')); // utf8
								}
							}
						}
					}
				}
			}
		} elseif ($path[1] != 'trash') {
			xenonFiles_lib_CreateTree($path[1],$path[1] . '://',$path[3],$myTree,'list_' . $path[1],realpath($path[0] . '/'));
		}
		$myTree->processList();
		if ($path[1] == 'real') {
			$content = vfs('real_getDirContent',array($path[0]));
		} elseif ($path[1] != 'groups' || realpath($path[0] . '/') != realpath(XENONOS_ROOT . '/' . GROUPS_DIR . '/')) {
			$content = vfs('getDirContent',array($path[0]));
		}
		$x = 0;
		while (isset($content[$x]) === true && !vfs('isdir',array($content[$x]))) {
			$x++;
		}
		if (isset($content[$x]) === true && vfs('isdir',array($content[$x]))) {
			if ($path[1] == 'groups' && $path[2] == '/') {
				$path[0] = $content[$x] . '/' . FILES_GROUP_DIR . '/';
			} elseif ($path[1] === 'users' && $path[2] !== '/' && /* utf8 */ substr_count($path[2], '/') === 1) {
				$path[0] = $content[$x] . '/' . FILES_USER_DIR . '/';
			} else {
				$path[0] = $content[$x];
			}
		}
		$myTree->expandTree('item_' . basename($path[0]) . '_' . md5(realpath($path[0])));
	}
}
?>